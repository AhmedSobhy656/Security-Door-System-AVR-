
Security_door_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  000034a2  00003536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080013e  0080013e  00003614  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  00003614  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f43  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007923  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000981c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a707  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c06f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*holds the number of seconds counted by the Timer0, Modified in the ISR*/
volatile uint8 second = 0;

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c0 59       	subi	r28, 0x90	; 144
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	/*---------------------- All Variables ----------------------------*/
	uint8 Pass_flag=0;/* This is flag if it 0 go (Step 1) else if 1 go (step 2) */
     b60:	fe 01       	movw	r30, r28
     b62:	eb 58       	subi	r30, 0x8B	; 139
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 first_Pass[6]; /*holds The first time enter password to store in system*/
	uint8 confirm_Pass[6]; /*holds the  password which confirm it in system*/
	uint8 Pass[7]; /* holds the passWord to open the door before adding (#) */
	uint8 Pass_send[7]; /*holds pass to open the door which send to other micro
	                          after adding (#) */
	uint8 compare_Pass=0;/*holds the return value of "strcmp" function when comparing
     b68:	fe 01       	movw	r30, r28
     b6a:	ec 58       	subi	r30, 0x8C	; 140
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	                       2 password in the first time */
	uint8 user_match;/*holds the user match between open the door(=)OR Change Password (+)*/
	uint8 message_flag = 0; /*like the flag if (1) go to The messages revieved from MC2*/
     b70:	fe 01       	movw	r30, r28
     b72:	ee 58       	subi	r30, 0x8E	; 142
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	10 82       	st	Z, r1
	uint8 wrong_Counter = 0; /* Count The password Entered wrong */
     b78:	fe 01       	movw	r30, r28
     b7a:	ef 58       	subi	r30, 0x8F	; 143
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	10 82       	st	Z, r1

	/*------------------------- Function initialisation---------------------  */
	LCD_init();
     b80:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_init>
	UART_init();
     b84:	0e 94 dd 18 	call	0x31ba	; 0x31ba <UART_init>
	SREG  |= (1<<7); //enable global interrupts in MC by setting the I-Bit.
     b88:	af e5       	ldi	r26, 0x5F	; 95
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ef e5       	ldi	r30, 0x5F	; 95
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	8c 93       	st	X, r24
    EEPROM_init();
     b96:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <EEPROM_init>

/* Read from the Internal_eeprom_avr The address (0x0A) which contain the flag for
     password */
    /* eepromReadByte(0x0A,&value_pass); /* Read from Internal eeprom for avr ... Not Work*/

    EEPROM_readByte(0x0A,&value_pass); /* Read from external EEPROM  */
     b9a:	9e 01       	movw	r18, r28
     b9c:	2a 58       	subi	r18, 0x8A	; 138
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	b9 01       	movw	r22, r18
     ba6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <EEPROM_readByte>

    if (value_pass != 0x03)
     baa:	fe 01       	movw	r30, r28
     bac:	ea 58       	subi	r30, 0x8A	; 138
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	80 81       	ld	r24, Z
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <main+0x7a>
		{
			Pass_flag = 0; // Go step 1
     bb6:	fe 01       	movw	r30, r28
     bb8:	eb 58       	subi	r30, 0x8B	; 139
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	10 82       	st	Z, r1
     bbe:	0b c0       	rjmp	.+22     	; 0xbd6 <main+0x90>
		}
		else if (value_pass == 0x03)
     bc0:	fe 01       	movw	r30, r28
     bc2:	ea 58       	subi	r30, 0x8A	; 138
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	29 f4       	brne	.+10     	; 0xbd6 <main+0x90>
		{
			Pass_flag = 1; // Go step 2
     bcc:	fe 01       	movw	r30, r28
     bce:	eb 58       	subi	r30, 0x8B	; 139
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 83       	st	Z, r24

  while (1)
	{
	 /* ----------------------------Step 1 ------------------------------------*/

	  if(Pass_flag == 0)
     bd6:	fe 01       	movw	r30, r28
     bd8:	eb 58       	subi	r30, 0x8B	; 139
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	80 81       	ld	r24, Z
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <main+0x9e>
     be2:	79 c2       	rjmp	.+1266   	; 0x10d6 <main+0x590>
	  {
		 LCD_clearScreen();
     be4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
		 LCD_displayStringRowColumn(0,0,"Enter Password");
     be8:	20 e6       	ldi	r18, 0x60	; 96
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	a9 01       	movw	r20, r18
     bf2:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
/* The first time enter password to store in system	by Fucntion (getPassWord)
   which placed in file PassWord.c */
        getPassword(first_Pass);
     bf6:	ce 01       	movw	r24, r28
     bf8:	89 58       	subi	r24, 0x89	; 137
     bfa:	9f 4f       	sbci	r25, 0xFF	; 255
     bfc:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>

        LCD_clearScreen();
     c00:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ReEnter The pass");
     c04:	2f e6       	ldi	r18, 0x6F	; 111
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	a9 01       	movw	r20, r18
     c0e:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
		getPassword(confirm_Pass);//  enter password to confirm it in system
     c12:	ce 01       	movw	r24, r28
     c14:	83 58       	subi	r24, 0x83	; 131
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>

/* compare between the two password when user Enter it at first time*/
		compare_Pass = strcmp(first_Pass, confirm_Pass);
     c1c:	ce 01       	movw	r24, r28
     c1e:	89 58       	subi	r24, 0x89	; 137
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	9e 01       	movw	r18, r28
     c24:	23 58       	subi	r18, 0x83	; 131
     c26:	3f 4f       	sbci	r19, 0xFF	; 255
     c28:	b9 01       	movw	r22, r18
     c2a:	0e 94 01 1a 	call	0x3402	; 0x3402 <strcmp>
     c2e:	fe 01       	movw	r30, r28
     c30:	ec 58       	subi	r30, 0x8C	; 140
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	80 83       	st	Z, r24
/* holds the return value of "strcmp" function when comparing 2 password in the first time*/
		  if (compare_Pass == 0)
     c36:	fe 01       	movw	r30, r28
     c38:	ec 58       	subi	r30, 0x8C	; 140
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <main+0xfe>
     c42:	8b c1       	rjmp	.+790    	; 0xf5a <main+0x414>
		   {
/* Write in the Internal_eeprom_avr The address (0x0A) which contain the flag for password*/
/*  eepromWriteByte(0x0A, 0x03); /*Write in internal eeprom for avr */
			    EEPROM_writeByte(0x0A, 0x03); /* Write in external eeprom  */
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	63 e0       	ldi	r22, 0x03	; 3
     c4a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <EEPROM_writeByte>
     c4e:	fe 01       	movw	r30, r28
     c50:	e3 59       	subi	r30, 0x93	; 147
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e2       	ldi	r26, 0x20	; 32
     c5a:	b1 e4       	ldi	r27, 0x41	; 65
     c5c:	80 83       	st	Z, r24
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	a2 83       	std	Z+2, r26	; 0x02
     c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	8e 01       	movw	r16, r28
     c66:	07 59       	subi	r16, 0x97	; 151
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	fe 01       	movw	r30, r28
     c6c:	e3 59       	subi	r30, 0x93	; 147
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	60 81       	ld	r22, Z
     c72:	71 81       	ldd	r23, Z+1	; 0x01
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	93 81       	ldd	r25, Z+3	; 0x03
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a e7       	ldi	r20, 0x7A	; 122
     c7e:	53 e4       	ldi	r21, 0x43	; 67
     c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	80 83       	st	Z, r24
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	a2 83       	std	Z+2, r26	; 0x02
     c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c92:	fe 01       	movw	r30, r28
     c94:	e7 59       	subi	r30, 0x97	; 151
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cac:	88 23       	and	r24, r24
     cae:	44 f4       	brge	.+16     	; 0xcc0 <main+0x17a>
		__ticks = 1;
     cb0:	fe 01       	movw	r30, r28
     cb2:	e9 59       	subi	r30, 0x99	; 153
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	64 c0       	rjmp	.+200    	; 0xd88 <main+0x242>
	else if (__tmp > 65535)
     cc0:	fe 01       	movw	r30, r28
     cc2:	e7 59       	subi	r30, 0x97	; 151
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cda:	18 16       	cp	r1, r24
     cdc:	0c f0       	brlt	.+2      	; 0xce0 <main+0x19a>
     cde:	43 c0       	rjmp	.+134    	; 0xd66 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce0:	fe 01       	movw	r30, r28
     ce2:	e3 59       	subi	r30, 0x93	; 147
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8e 01       	movw	r16, r28
     d00:	09 59       	subi	r16, 0x99	; 153
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	f8 01       	movw	r30, r16
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <main+0x210>
     d18:	fe 01       	movw	r30, r28
     d1a:	eb 59       	subi	r30, 0x9B	; 155
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	89 e1       	ldi	r24, 0x19	; 25
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d26:	fe 01       	movw	r30, r28
     d28:	eb 59       	subi	r30, 0x9B	; 155
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <main+0x1ea>
     d34:	fe 01       	movw	r30, r28
     d36:	eb 59       	subi	r30, 0x9B	; 155
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	de 01       	movw	r26, r28
     d40:	a9 59       	subi	r26, 0x99	; 153
     d42:	bf 4f       	sbci	r27, 0xFF	; 255
     d44:	fe 01       	movw	r30, r28
     d46:	e9 59       	subi	r30, 0x99	; 153
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	9c 93       	st	X, r25
     d54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	fe 01       	movw	r30, r28
     d58:	e9 59       	subi	r30, 0x99	; 153
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	d1 f6       	brne	.-76     	; 0xd18 <main+0x1d2>
     d64:	27 c0       	rjmp	.+78     	; 0xdb4 <main+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	8e 01       	movw	r16, r28
     d68:	09 59       	subi	r16, 0x99	; 153
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	fe 01       	movw	r30, r28
     d6e:	e7 59       	subi	r30, 0x97	; 151
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	f8 01       	movw	r30, r16
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
     d88:	de 01       	movw	r26, r28
     d8a:	ad 59       	subi	r26, 0x9D	; 157
     d8c:	bf 4f       	sbci	r27, 0xFF	; 255
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 59       	subi	r30, 0x99	; 153
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	8d 93       	st	X+, r24
     d9a:	9c 93       	st	X, r25
     d9c:	fe 01       	movw	r30, r28
     d9e:	ed 59       	subi	r30, 0x9D	; 157
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x260>
     daa:	fe 01       	movw	r30, r28
     dac:	ed 59       	subi	r30, 0x9D	; 157
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
				  _delay_ms(10);
  			    Pass_flag = 1;
     db4:	fe 01       	movw	r30, r28
     db6:	eb 58       	subi	r30, 0x8B	; 139
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24

			  LCD_clearScreen();
     dbe:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
			  LCD_displayStringRowColumn(2,4," True ");
     dc2:	20 e8       	ldi	r18, 0x80	; 128
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	64 e0       	ldi	r22, 0x04	; 4
     dca:	a9 01       	movw	r20, r18
     dcc:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
     dd0:	fe 01       	movw	r30, r28
     dd2:	e1 5a       	subi	r30, 0xA1	; 161
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	aa e7       	ldi	r26, 0x7A	; 122
     ddc:	b4 e4       	ldi	r27, 0x44	; 68
     dde:	80 83       	st	Z, r24
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	a2 83       	std	Z+2, r26	; 0x02
     de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de6:	8e 01       	movw	r16, r28
     de8:	05 5a       	subi	r16, 0xA5	; 165
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	fe 01       	movw	r30, r28
     dee:	e1 5a       	subi	r30, 0xA1	; 161
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a e7       	ldi	r20, 0x7A	; 122
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	f8 01       	movw	r30, r16
     e0c:	80 83       	st	Z, r24
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	a2 83       	std	Z+2, r26	; 0x02
     e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e14:	fe 01       	movw	r30, r28
     e16:	e5 5a       	subi	r30, 0xA5	; 165
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2e:	88 23       	and	r24, r24
     e30:	44 f4       	brge	.+16     	; 0xe42 <main+0x2fc>
		__ticks = 1;
     e32:	fe 01       	movw	r30, r28
     e34:	e7 5a       	subi	r30, 0xA7	; 167
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
     e40:	64 c0       	rjmp	.+200    	; 0xf0a <main+0x3c4>
	else if (__tmp > 65535)
     e42:	fe 01       	movw	r30, r28
     e44:	e5 5a       	subi	r30, 0xA5	; 165
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	57 e4       	ldi	r21, 0x47	; 71
     e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	0c f0       	brlt	.+2      	; 0xe62 <main+0x31c>
     e60:	43 c0       	rjmp	.+134    	; 0xee8 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e62:	fe 01       	movw	r30, r28
     e64:	e1 5a       	subi	r30, 0xA1	; 161
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e2       	ldi	r20, 0x20	; 32
     e76:	51 e4       	ldi	r21, 0x41	; 65
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	8e 01       	movw	r16, r28
     e82:	07 5a       	subi	r16, 0xA7	; 167
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	f8 01       	movw	r30, r16
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	1f c0       	rjmp	.+62     	; 0xed8 <main+0x392>
     e9a:	fe 01       	movw	r30, r28
     e9c:	e9 5a       	subi	r30, 0xA9	; 169
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	89 e1       	ldi	r24, 0x19	; 25
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	fe 01       	movw	r30, r28
     eaa:	e9 5a       	subi	r30, 0xA9	; 169
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <main+0x36c>
     eb6:	fe 01       	movw	r30, r28
     eb8:	e9 5a       	subi	r30, 0xA9	; 169
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	de 01       	movw	r26, r28
     ec2:	a7 5a       	subi	r26, 0xA7	; 167
     ec4:	bf 4f       	sbci	r27, 0xFF	; 255
     ec6:	fe 01       	movw	r30, r28
     ec8:	e7 5a       	subi	r30, 0xA7	; 167
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	11 96       	adiw	r26, 0x01	; 1
     ed4:	9c 93       	st	X, r25
     ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	fe 01       	movw	r30, r28
     eda:	e7 5a       	subi	r30, 0xA7	; 167
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	d1 f6       	brne	.-76     	; 0xe9a <main+0x354>
     ee6:	27 c0       	rjmp	.+78     	; 0xf36 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee8:	8e 01       	movw	r16, r28
     eea:	07 5a       	subi	r16, 0xA7	; 167
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	fe 01       	movw	r30, r28
     ef0:	e5 5a       	subi	r30, 0xA5	; 165
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	f8 01       	movw	r30, r16
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	de 01       	movw	r26, r28
     f0c:	ab 5a       	subi	r26, 0xAB	; 171
     f0e:	bf 4f       	sbci	r27, 0xFF	; 255
     f10:	fe 01       	movw	r30, r28
     f12:	e7 5a       	subi	r30, 0xA7	; 167
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	8d 93       	st	X+, r24
     f1c:	9c 93       	st	X, r25
     f1e:	fe 01       	movw	r30, r28
     f20:	eb 5a       	subi	r30, 0xAB	; 171
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <main+0x3e2>
     f2c:	fe 01       	movw	r30, r28
     f2e:	eb 5a       	subi	r30, 0xAB	; 171
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
				_delay_ms(1000);
/*befor sending the PassWord to MC2 we need to attach the (#) in end message
   to MC2 understand the message is ended ..The (prepareToSend function) make that*/
		    prepareToSend(first_Pass, Pass_send);
     f36:	ce 01       	movw	r24, r28
     f38:	89 58       	subi	r24, 0x89	; 137
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	9e 01       	movw	r18, r28
     f3e:	26 57       	subi	r18, 0x76	; 118
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	b9 01       	movw	r22, r18
     f44:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <prepareToSend>
/* before sending the message , The MC2 should you know it recieved message from MC1
 *  So, we sending this message (NEW_PASSWORD) to ready */
		    UART_sendByte(NEW_PASSWORD); /* defined in file usart_message.h */
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>
			UART_sendString(Pass_send);  /* send Password after adding (#) */
     f4e:	ce 01       	movw	r24, r28
     f50:	86 57       	subi	r24, 0x76	; 118
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	0e 94 1d 19 	call	0x323a	; 0x323a <UART_sendString>
     f58:	3e ce       	rjmp	.-900    	; 0xbd6 <main+0x90>

       		}
			else
			{
					LCD_clearScreen();
     f5a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
					LCD_displayStringRowColumn(2,4," False ");
     f5e:	27 e8       	ldi	r18, 0x87	; 135
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	64 e0       	ldi	r22, 0x04	; 4
     f66:	a9 01       	movw	r20, r18
     f68:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
     f6c:	fe 01       	movw	r30, r28
     f6e:	ef 5a       	subi	r30, 0xAF	; 175
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	aa ef       	ldi	r26, 0xFA	; 250
     f78:	b4 e4       	ldi	r27, 0x44	; 68
     f7a:	80 83       	st	Z, r24
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	a2 83       	std	Z+2, r26	; 0x02
     f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f82:	8e 01       	movw	r16, r28
     f84:	03 5b       	subi	r16, 0xB3	; 179
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	ef 5a       	subi	r30, 0xAF	; 175
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a e7       	ldi	r20, 0x7A	; 122
     f9c:	53 e4       	ldi	r21, 0x43	; 67
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 83       	st	Z, r24
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	a2 83       	std	Z+2, r26	; 0x02
     fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fb0:	fe 01       	movw	r30, r28
     fb2:	e3 5b       	subi	r30, 0xB3	; 179
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fca:	88 23       	and	r24, r24
     fcc:	44 f4       	brge	.+16     	; 0xfde <main+0x498>
		__ticks = 1;
     fce:	fe 01       	movw	r30, r28
     fd0:	e5 5b       	subi	r30, 0xB5	; 181
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	64 c0       	rjmp	.+200    	; 0x10a6 <main+0x560>
	else if (__tmp > 65535)
     fde:	fe 01       	movw	r30, r28
     fe0:	e3 5b       	subi	r30, 0xB3	; 179
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	57 e4       	ldi	r21, 0x47	; 71
     ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	0c f0       	brlt	.+2      	; 0xffe <main+0x4b8>
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <main+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	fe 01       	movw	r30, r28
    1000:	ef 5a       	subi	r30, 0xAF	; 175
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8e 01       	movw	r16, r28
    101e:	05 5b       	subi	r16, 0xB5	; 181
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	f8 01       	movw	r30, r16
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	1f c0       	rjmp	.+62     	; 0x1074 <main+0x52e>
    1036:	fe 01       	movw	r30, r28
    1038:	e7 5b       	subi	r30, 0xB7	; 183
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	89 e1       	ldi	r24, 0x19	; 25
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	fe 01       	movw	r30, r28
    1046:	e7 5b       	subi	r30, 0xB7	; 183
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <main+0x508>
    1052:	fe 01       	movw	r30, r28
    1054:	e7 5b       	subi	r30, 0xB7	; 183
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	de 01       	movw	r26, r28
    105e:	a5 5b       	subi	r26, 0xB5	; 181
    1060:	bf 4f       	sbci	r27, 0xFF	; 255
    1062:	fe 01       	movw	r30, r28
    1064:	e5 5b       	subi	r30, 0xB5	; 181
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	9c 93       	st	X, r25
    1072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	fe 01       	movw	r30, r28
    1076:	e5 5b       	subi	r30, 0xB5	; 181
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	d1 f6       	brne	.-76     	; 0x1036 <main+0x4f0>
    1082:	a9 cd       	rjmp	.-1198   	; 0xbd6 <main+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1084:	8e 01       	movw	r16, r28
    1086:	05 5b       	subi	r16, 0xB5	; 181
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	fe 01       	movw	r30, r28
    108c:	e3 5b       	subi	r30, 0xB3	; 179
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	f8 01       	movw	r30, r16
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	de 01       	movw	r26, r28
    10a8:	a9 5b       	subi	r26, 0xB9	; 185
    10aa:	bf 4f       	sbci	r27, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	e5 5b       	subi	r30, 0xB5	; 181
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	11 96       	adiw	r26, 0x01	; 1
    10b8:	9c 93       	st	X, r25
    10ba:	8e 93       	st	-X, r24
    10bc:	fe 01       	movw	r30, r28
    10be:	e9 5b       	subi	r30, 0xB9	; 185
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <main+0x580>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e9 5b       	subi	r30, 0xB9	; 185
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	80 83       	st	Z, r24
    10d4:	80 cd       	rjmp	.-1280   	; 0xbd6 <main+0x90>

	   }

/*---------------------------- Step 2 ----------------------------------------*/

	  else if (Pass_flag == 1) /*The Next step to open the door OR change Password */
    10d6:	fe 01       	movw	r30, r28
    10d8:	eb 58       	subi	r30, 0x8B	; 139
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	80 81       	ld	r24, Z
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <main+0x59e>
    10e2:	79 cd       	rjmp	.-1294   	; 0xbd6 <main+0x90>
	    {
		if (message_flag == 0) /*like the flag if (1)go to The messages revieved from MC2*/
    10e4:	fe 01       	movw	r30, r28
    10e6:	ee 58       	subi	r30, 0x8E	; 142
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <main+0x5ac>
    10f0:	6d c0       	rjmp	.+218    	; 0x11cc <main+0x686>
			{
		             LCD_clearScreen();
    10f2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
		            LCD_displayStringRowColumn(0, 0, "= : Open Door   ");
    10f6:	2f e8       	ldi	r18, 0x8F	; 143
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
			    	LCD_displayStringRowColumn(1, 0, "+ : Change pass");
    1104:	20 ea       	ldi	r18, 0xA0	; 160
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
			    	user_match = KeyPad_getPressedKey();
    1112:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <KeyPad_getPressedKey>
    1116:	fe 01       	movw	r30, r28
    1118:	ed 58       	subi	r30, 0x8D	; 141
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 83       	st	Z, r24

			    if (user_match == '=')  /* to open the door*/
    111e:	fe 01       	movw	r30, r28
    1120:	ed 58       	subi	r30, 0x8D	; 141
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	8d 33       	cpi	r24, 0x3D	; 61
    1128:	29 f5       	brne	.+74     	; 0x1174 <main+0x62e>
			      {
			    	message_flag = 1;
    112a:	fe 01       	movw	r30, r28
    112c:	ee 58       	subi	r30, 0x8E	; 142
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 83       	st	Z, r24

			    	 LCD_clearScreen();
    1134:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
			    	 LCD_displayStringRowColumn(1,0,"Enter Password ");
    1138:	20 eb       	ldi	r18, 0xB0	; 176
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
			    	 getPassword(Pass);
    1146:	ce 01       	movw	r24, r28
    1148:	8d 57       	subi	r24, 0x7D	; 125
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>

			    	 prepareToSend( Pass , Pass_send);
    1150:	ce 01       	movw	r24, r28
    1152:	8d 57       	subi	r24, 0x7D	; 125
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	9e 01       	movw	r18, r28
    1158:	26 57       	subi	r18, 0x76	; 118
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <prepareToSend>
			    	 UART_sendByte(OPEN_DOOR);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>
					 UART_sendString(Pass_send);  //second send
    1168:	ce 01       	movw	r24, r28
    116a:	86 57       	subi	r24, 0x76	; 118
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	0e 94 1d 19 	call	0x323a	; 0x323a <UART_sendString>
    1172:	31 cd       	rjmp	.-1438   	; 0xbd6 <main+0x90>
     		      }
			    else if (user_match == '+')  /* Change Password */
    1174:	fe 01       	movw	r30, r28
    1176:	ed 58       	subi	r30, 0x8D	; 141
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	8b 32       	cpi	r24, 0x2B	; 43
    117e:	09 f0       	breq	.+2      	; 0x1182 <main+0x63c>
    1180:	2a cd       	rjmp	.-1452   	; 0xbd6 <main+0x90>
			   	 {
			    	message_flag = 1;
    1182:	fe 01       	movw	r30, r28
    1184:	ee 58       	subi	r30, 0x8E	; 142
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 83       	st	Z, r24
					 LCD_clearScreen();
    118c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
					 LCD_displayStringRowColumn(1,0,"Current password");
    1190:	20 ec       	ldi	r18, 0xC0	; 192
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	a9 01       	movw	r20, r18
    119a:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
					 getPassword(Pass);
    119e:	ce 01       	movw	r24, r28
    11a0:	8d 57       	subi	r24, 0x7D	; 125
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>

					 prepareToSend( Pass , Pass_send);
    11a8:	ce 01       	movw	r24, r28
    11aa:	8d 57       	subi	r24, 0x7D	; 125
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	9e 01       	movw	r18, r28
    11b0:	26 57       	subi	r18, 0x76	; 118
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	b9 01       	movw	r22, r18
    11b6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <prepareToSend>
					 UART_sendByte(CHANGE_PASSWORD);
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>
					UART_sendString(Pass_send);  //Third send
    11c0:	ce 01       	movw	r24, r28
    11c2:	86 57       	subi	r24, 0x76	; 118
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	0e 94 1d 19 	call	0x323a	; 0x323a <UART_sendString>
    11ca:	05 cd       	rjmp	.-1526   	; 0xbd6 <main+0x90>
			   	 }
		  	}

/* --------------------------------Messages from MC2----------------------------------- */

	 else if (message_flag == 1)
    11cc:	fe 01       	movw	r30, r28
    11ce:	ee 58       	subi	r30, 0x8E	; 142
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f0       	breq	.+2      	; 0x11da <main+0x694>
    11d8:	fe cc       	rjmp	.-1540   	; 0xbd6 <main+0x90>
	  	{
		 if (MC_1_recieved == 1) /*message from MC2 (Door is Opening)..
    11da:	80 91 3e 01 	lds	r24, 0x013E
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	49 f5       	brne	.+82     	; 0x1234 <main+0x6ee>
		                           defined in file uart.c  in ISR For Usart Driver--  */
			{
			  MC_1_recieved = 0;
    11e2:	10 92 3e 01 	sts	0x013E, r1

     		  LCD_clearScreen();
    11e6:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  		  LCD_displayStringRowColumn(1, 0, "Door Is Opening");
    11ea:	21 ed       	ldi	r18, 0xD1	; 209
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
	  		//	_delay_ms(3000);

	  					timer0_init_normal_mode(); /* display for 3 seconds */
    11f8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <timer0_init_normal_mode>
	  					while (second < 3);
    11fc:	80 91 3f 01 	lds	r24, 0x013F
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	e0 f3       	brcs	.-8      	; 0x11fc <main+0x6b6>
	  					second = 0;
    1204:	10 92 3f 01 	sts	0x013F, r1

	  		 LCD_clearScreen();
    1208:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  		 LCD_displayStringRowColumn(1, 0, "Door Is Closing");
    120c:	21 ee       	ldi	r18, 0xE1	; 225
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
	  			//_delay_ms(3000);

	  					timer0_init_normal_mode();
    121a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <timer0_init_normal_mode>
	  					while (second < 3);
    121e:	80 91 3f 01 	lds	r24, 0x013F
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	e0 f3       	brcs	.-8      	; 0x121e <main+0x6d8>
	  					second = 0;
    1226:	10 92 3f 01 	sts	0x013F, r1
	  					message_flag = 0;
    122a:	fe 01       	movw	r30, r28
    122c:	ee 58       	subi	r30, 0x8E	; 142
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	10 82       	st	Z, r1
    1232:	d1 cc       	rjmp	.-1630   	; 0xbd6 <main+0x90>
			}
//---------------------------------------------------------------------------
		else if (MC_1_recieved == 2) /* message from MC2 (Wrong Password) ..
    1234:	80 91 3e 01 	lds	r24, 0x013E
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	09 f0       	breq	.+2      	; 0x123e <main+0x6f8>
    123c:	c1 c0       	rjmp	.+386    	; 0x13c0 <main+0x87a>
		                               defined in file uart.c in ISR For Usart Driver*/
		{
		  MC_1_recieved = 0;
    123e:	10 92 3e 01 	sts	0x013E, r1
		  wrong_Counter++;
    1242:	de 01       	movw	r26, r28
    1244:	af 58       	subi	r26, 0x8F	; 143
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	ef 58       	subi	r30, 0x8F	; 143
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8c 93       	st	X, r24
		  if (wrong_Counter == 3)
    1254:	fe 01       	movw	r30, r28
    1256:	ef 58       	subi	r30, 0x8F	; 143
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	e9 f4       	brne	.+58     	; 0x129a <main+0x754>
			{
	  		  UART_sendByte(ALARM); //send message to MC2 to On the alarm
    1260:	81 e1       	ldi	r24, 0x11	; 17
    1262:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>

			  LCD_clearScreen();
    1266:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
			  LCD_displayStringRowColumn(1, 0, "     ERROR      ");
    126a:	21 ef       	ldi	r18, 0xF1	; 241
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
			//	_delay_ms(2000);
			  timer0_init_normal_mode();
    1278:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <timer0_init_normal_mode>
			  while (second != 10);
    127c:	80 91 3f 01 	lds	r24, 0x013F
    1280:	8a 30       	cpi	r24, 0x0A	; 10
    1282:	e1 f7       	brne	.-8      	; 0x127c <main+0x736>
				second = 0;
    1284:	10 92 3f 01 	sts	0x013F, r1
			  wrong_Counter = 0;
    1288:	fe 01       	movw	r30, r28
    128a:	ef 58       	subi	r30, 0x8F	; 143
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	10 82       	st	Z, r1

			  message_flag = 0;
    1290:	fe 01       	movw	r30, r28
    1292:	ee 58       	subi	r30, 0x8E	; 142
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	10 82       	st	Z, r1
    1298:	9e cc       	rjmp	.-1732   	; 0xbd6 <main+0x90>

				continue;
			}

		  LCD_clearScreen();
    129a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
		  LCD_displayStringRowColumn(1, 1, "Wrong password");
    129e:	22 e0       	ldi	r18, 0x02	; 2
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	a9 01       	movw	r20, r18
    12a8:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
    12ac:	fe 01       	movw	r30, r28
    12ae:	ed 5b       	subi	r30, 0xBD	; 189
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	aa ef       	ldi	r26, 0xFA	; 250
    12b8:	b4 e4       	ldi	r27, 0x44	; 68
    12ba:	80 83       	st	Z, r24
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	a2 83       	std	Z+2, r26	; 0x02
    12c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	8e 01       	movw	r16, r28
    12c4:	01 5c       	subi	r16, 0xC1	; 193
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	fe 01       	movw	r30, r28
    12ca:	ed 5b       	subi	r30, 0xBD	; 189
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	53 e4       	ldi	r21, 0x43	; 67
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 83       	st	Z, r24
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	a2 83       	std	Z+2, r26	; 0x02
    12ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12f0:	fe 01       	movw	r30, r28
    12f2:	ff 96       	adiw	r30, 0x3f	; 63
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <main+0x7d0>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9e af       	std	Y+62, r25	; 0x3e
    1312:	8d af       	std	Y+61, r24	; 0x3d
    1314:	46 c0       	rjmp	.+140    	; 0x13a2 <main+0x85c>
	else if (__tmp > 65535)
    1316:	fe 01       	movw	r30, r28
    1318:	ff 96       	adiw	r30, 0x3f	; 63
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	64 f5       	brge	.+88     	; 0x138a <main+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	fe 01       	movw	r30, r28
    1334:	ed 5b       	subi	r30, 0xBD	; 189
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e af       	std	Y+62, r25	; 0x3e
    135e:	8d af       	std	Y+61, r24	; 0x3d
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <main+0x83a>
    1362:	89 e1       	ldi	r24, 0x19	; 25
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c af       	std	Y+60, r25	; 0x3c
    1368:	8b af       	std	Y+59, r24	; 0x3b
    136a:	8b ad       	ldd	r24, Y+59	; 0x3b
    136c:	9c ad       	ldd	r25, Y+60	; 0x3c
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <main+0x828>
    1372:	9c af       	std	Y+60, r25	; 0x3c
    1374:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8d ad       	ldd	r24, Y+61	; 0x3d
    1378:	9e ad       	ldd	r25, Y+62	; 0x3e
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9e af       	std	Y+62, r25	; 0x3e
    137e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8d ad       	ldd	r24, Y+61	; 0x3d
    1382:	9e ad       	ldd	r25, Y+62	; 0x3e
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <main+0x81c>
    1388:	16 c0       	rjmp	.+44     	; 0x13b6 <main+0x870>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	fe 01       	movw	r30, r28
    138c:	ff 96       	adiw	r30, 0x3f	; 63
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9e af       	std	Y+62, r25	; 0x3e
    13a0:	8d af       	std	Y+61, r24	; 0x3d
    13a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a6:	9a af       	std	Y+58, r25	; 0x3a
    13a8:	89 af       	std	Y+57, r24	; 0x39
    13aa:	89 ad       	ldd	r24, Y+57	; 0x39
    13ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <main+0x868>
    13b2:	9a af       	std	Y+58, r25	; 0x3a
    13b4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
			message_flag = 0;
    13b6:	fe 01       	movw	r30, r28
    13b8:	ee 58       	subi	r30, 0x8E	; 142
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	10 82       	st	Z, r1
    13be:	0b cc       	rjmp	.-2026   	; 0xbd6 <main+0x90>
		}
	//------------------------------------------------------------------------
	  else if (MC_1_recieved == 3) /* message from MC2 (Change Password) ..
    13c0:	80 91 3e 01 	lds	r24, 0x013E
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	09 f0       	breq	.+2      	; 0x13ca <main+0x884>
    13c8:	06 cc       	rjmp	.-2036   	; 0xbd6 <main+0x90>
		                               defined in file uart.c in ISR For Usart Driver*/
	  	{
		/* -------------Repeat Step 1--------------*/
		  MC_1_recieved = 0;
    13ca:	10 92 3e 01 	sts	0x013E, r1
	  	 LCD_clearScreen();
    13ce:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  	LCD_displayStringRowColumn(0,0,"Enter Password");
    13d2:	20 e6       	ldi	r18, 0x60	; 96
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
	  	getPassword(first_Pass);
    13e0:	ce 01       	movw	r24, r28
    13e2:	89 58       	subi	r24, 0x89	; 137
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>
	  	LCD_clearScreen();
    13ea:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>

	  	LCD_displayStringRowColumn(0, 0, "ReEnter The pass");
    13ee:	2f e6       	ldi	r18, 0x6F	; 111
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
	  	getPassword(confirm_Pass);
    13fc:	ce 01       	movw	r24, r28
    13fe:	83 58       	subi	r24, 0x83	; 131
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	0e 94 83 0c 	call	0x1906	; 0x1906 <getPassword>

	  	compare_Pass = strcmp(first_Pass, confirm_Pass);
    1406:	ce 01       	movw	r24, r28
    1408:	89 58       	subi	r24, 0x89	; 137
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	9e 01       	movw	r18, r28
    140e:	23 58       	subi	r18, 0x83	; 131
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	b9 01       	movw	r22, r18
    1414:	0e 94 01 1a 	call	0x3402	; 0x3402 <strcmp>
    1418:	fe 01       	movw	r30, r28
    141a:	ec 58       	subi	r30, 0x8C	; 140
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 83       	st	Z, r24

	  	if (compare_Pass == 0)
    1420:	fe 01       	movw	r30, r28
    1422:	ec 58       	subi	r30, 0x8C	; 140
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 81       	ld	r24, Z
    1428:	88 23       	and	r24, r24
    142a:	09 f0       	breq	.+2      	; 0x142e <main+0x8e8>
    142c:	0d c1       	rjmp	.+538    	; 0x1648 <main+0xb02>
	  	  {
	  		//  eepromWriteByte(0x0A, 0x03);/* Write in the Internal_eeprom_avr */

	  		    EEPROM_writeByte(0x0A, 0x03);
    142e:	8a e0       	ldi	r24, 0x0A	; 10
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	63 e0       	ldi	r22, 0x03	; 3
    1434:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <EEPROM_writeByte>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a0 e2       	ldi	r26, 0x20	; 32
    143e:	b1 e4       	ldi	r27, 0x41	; 65
    1440:	8d ab       	std	Y+53, r24	; 0x35
    1442:	9e ab       	std	Y+54, r25	; 0x36
    1444:	af ab       	std	Y+55, r26	; 0x37
    1446:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6d a9       	ldd	r22, Y+53	; 0x35
    144a:	7e a9       	ldd	r23, Y+54	; 0x36
    144c:	8f a9       	ldd	r24, Y+55	; 0x37
    144e:	98 ad       	ldd	r25, Y+56	; 0x38
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a e7       	ldi	r20, 0x7A	; 122
    1456:	53 e4       	ldi	r21, 0x43	; 67
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	89 ab       	std	Y+49, r24	; 0x31
    1462:	9a ab       	std	Y+50, r25	; 0x32
    1464:	ab ab       	std	Y+51, r26	; 0x33
    1466:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1468:	69 a9       	ldd	r22, Y+49	; 0x31
    146a:	7a a9       	ldd	r23, Y+50	; 0x32
    146c:	8b a9       	ldd	r24, Y+51	; 0x33
    146e:	9c a9       	ldd	r25, Y+52	; 0x34
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <main+0x944>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	98 ab       	std	Y+48, r25	; 0x30
    1486:	8f a7       	std	Y+47, r24	; 0x2f
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <main+0x9c2>
	else if (__tmp > 65535)
    148a:	69 a9       	ldd	r22, Y+49	; 0x31
    148c:	7a a9       	ldd	r23, Y+50	; 0x32
    148e:	8b a9       	ldd	r24, Y+51	; 0x33
    1490:	9c a9       	ldd	r25, Y+52	; 0x34
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <main+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6d a9       	ldd	r22, Y+53	; 0x35
    14a4:	7e a9       	ldd	r23, Y+54	; 0x36
    14a6:	8f a9       	ldd	r24, Y+55	; 0x37
    14a8:	98 ad       	ldd	r25, Y+56	; 0x38
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	98 ab       	std	Y+48, r25	; 0x30
    14c8:	8f a7       	std	Y+47, r24	; 0x2f
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <main+0x9a4>
    14cc:	89 e1       	ldi	r24, 0x19	; 25
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9e a7       	std	Y+46, r25	; 0x2e
    14d2:	8d a7       	std	Y+45, r24	; 0x2d
    14d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <main+0x992>
    14dc:	9e a7       	std	Y+46, r25	; 0x2e
    14de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	98 ab       	std	Y+48, r25	; 0x30
    14e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ec:	98 a9       	ldd	r25, Y+48	; 0x30
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <main+0x986>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <main+0x9d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	9c a7       	std	Y+44, r25	; 0x2c
    150e:	8b a7       	std	Y+43, r24	; 0x2b
    1510:	8b a5       	ldd	r24, Y+43	; 0x2b
    1512:	9c a5       	ldd	r25, Y+44	; 0x2c
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <main+0x9ce>
    1518:	9c a7       	std	Y+44, r25	; 0x2c
    151a:	8b a7       	std	Y+43, r24	; 0x2b
	  		  _delay_ms(10);

	  		  Pass_flag = 1;
    151c:	fe 01       	movw	r30, r28
    151e:	eb 58       	subi	r30, 0x8B	; 139
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	80 83       	st	Z, r24

	  		  LCD_clearScreen();
    1526:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  		  LCD_displayStringRowColumn(2,0,"PassWord Changed");
    152a:	21 e1       	ldi	r18, 0x11	; 17
    152c:	31 e0       	ldi	r19, 0x01	; 1
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	a9 01       	movw	r20, r18
    1534:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	aa e7       	ldi	r26, 0x7A	; 122
    153e:	b4 e4       	ldi	r27, 0x44	; 68
    1540:	8f a3       	std	Y+39, r24	; 0x27
    1542:	98 a7       	std	Y+40, r25	; 0x28
    1544:	a9 a7       	std	Y+41, r26	; 0x29
    1546:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1548:	6f a1       	ldd	r22, Y+39	; 0x27
    154a:	78 a5       	ldd	r23, Y+40	; 0x28
    154c:	89 a5       	ldd	r24, Y+41	; 0x29
    154e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a e7       	ldi	r20, 0x7A	; 122
    1556:	53 e4       	ldi	r21, 0x43	; 67
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8b a3       	std	Y+35, r24	; 0x23
    1562:	9c a3       	std	Y+36, r25	; 0x24
    1564:	ad a3       	std	Y+37, r26	; 0x25
    1566:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1568:	6b a1       	ldd	r22, Y+35	; 0x23
    156a:	7c a1       	ldd	r23, Y+36	; 0x24
    156c:	8d a1       	ldd	r24, Y+37	; 0x25
    156e:	9e a1       	ldd	r25, Y+38	; 0x26
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157c:	88 23       	and	r24, r24
    157e:	2c f4       	brge	.+10     	; 0x158a <main+0xa44>
		__ticks = 1;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9a a3       	std	Y+34, r25	; 0x22
    1586:	89 a3       	std	Y+33, r24	; 0x21
    1588:	3f c0       	rjmp	.+126    	; 0x1608 <main+0xac2>
	else if (__tmp > 65535)
    158a:	6b a1       	ldd	r22, Y+35	; 0x23
    158c:	7c a1       	ldd	r23, Y+36	; 0x24
    158e:	8d a1       	ldd	r24, Y+37	; 0x25
    1590:	9e a1       	ldd	r25, Y+38	; 0x26
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	4c f5       	brge	.+82     	; 0x15f4 <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	6f a1       	ldd	r22, Y+39	; 0x27
    15a4:	78 a5       	ldd	r23, Y+40	; 0x28
    15a6:	89 a5       	ldd	r24, Y+41	; 0x29
    15a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9a a3       	std	Y+34, r25	; 0x22
    15c8:	89 a3       	std	Y+33, r24	; 0x21
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <main+0xaa4>
    15cc:	89 e1       	ldi	r24, 0x19	; 25
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	98 a3       	std	Y+32, r25	; 0x20
    15d2:	8f 8f       	std	Y+31, r24	; 0x1f
    15d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15d6:	98 a1       	ldd	r25, Y+32	; 0x20
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <main+0xa92>
    15dc:	98 a3       	std	Y+32, r25	; 0x20
    15de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e0:	89 a1       	ldd	r24, Y+33	; 0x21
    15e2:	9a a1       	ldd	r25, Y+34	; 0x22
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	9a a3       	std	Y+34, r25	; 0x22
    15e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ea:	89 a1       	ldd	r24, Y+33	; 0x21
    15ec:	9a a1       	ldd	r25, Y+34	; 0x22
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	69 f7       	brne	.-38     	; 0x15cc <main+0xa86>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <main+0xad6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f4:	6b a1       	ldd	r22, Y+35	; 0x23
    15f6:	7c a1       	ldd	r23, Y+36	; 0x24
    15f8:	8d a1       	ldd	r24, Y+37	; 0x25
    15fa:	9e a1       	ldd	r25, Y+38	; 0x26
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9a a3       	std	Y+34, r25	; 0x22
    1606:	89 a3       	std	Y+33, r24	; 0x21
    1608:	89 a1       	ldd	r24, Y+33	; 0x21
    160a:	9a a1       	ldd	r25, Y+34	; 0x22
    160c:	9e 8f       	std	Y+30, r25	; 0x1e
    160e:	8d 8f       	std	Y+29, r24	; 0x1d
    1610:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1612:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <main+0xace>
    1618:	9e 8f       	std	Y+30, r25	; 0x1e
    161a:	8d 8f       	std	Y+29, r24	; 0x1d
	  		_delay_ms(1000);

	  		  prepareToSend( first_Pass, Pass_send);
    161c:	ce 01       	movw	r24, r28
    161e:	89 58       	subi	r24, 0x89	; 137
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	9e 01       	movw	r18, r28
    1624:	26 57       	subi	r18, 0x76	; 118
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	b9 01       	movw	r22, r18
    162a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <prepareToSend>
	  		  UART_sendByte( CONFIRM_CHANGED);
    162e:	88 e0       	ldi	r24, 0x08	; 8
    1630:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>
	  		  UART_sendString(Pass_send);
    1634:	ce 01       	movw	r24, r28
    1636:	86 57       	subi	r24, 0x76	; 118
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	0e 94 1d 19 	call	0x323a	; 0x323a <UART_sendString>

				message_flag = 0;
    163e:	fe 01       	movw	r30, r28
    1640:	ee 58       	subi	r30, 0x8E	; 142
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	10 82       	st	Z, r1
    1646:	c7 ca       	rjmp	.-2674   	; 0xbd6 <main+0x90>

	  	 }
	  	else
	  	{
	  		LCD_clearScreen();
    1648:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  		LCD_displayStringRowColumn(2,4," False ");
    164c:	27 e8       	ldi	r18, 0x87	; 135
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	a9 01       	movw	r20, r18
    1656:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	aa e7       	ldi	r26, 0x7A	; 122
    1660:	b4 e4       	ldi	r27, 0x44	; 68
    1662:	89 8f       	std	Y+25, r24	; 0x19
    1664:	9a 8f       	std	Y+26, r25	; 0x1a
    1666:	ab 8f       	std	Y+27, r26	; 0x1b
    1668:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	69 8d       	ldd	r22, Y+25	; 0x19
    166c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a e7       	ldi	r20, 0x7A	; 122
    1678:	53 e4       	ldi	r21, 0x43	; 67
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8d 8b       	std	Y+21, r24	; 0x15
    1684:	9e 8b       	std	Y+22, r25	; 0x16
    1686:	af 8b       	std	Y+23, r26	; 0x17
    1688:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    168a:	6d 89       	ldd	r22, Y+21	; 0x15
    168c:	7e 89       	ldd	r23, Y+22	; 0x16
    168e:	8f 89       	ldd	r24, Y+23	; 0x17
    1690:	98 8d       	ldd	r25, Y+24	; 0x18
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <main+0xb66>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 8b       	std	Y+20, r25	; 0x14
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <main+0xbe4>
	else if (__tmp > 65535)
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <main+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	69 8d       	ldd	r22, Y+25	; 0x19
    16c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <main+0xbc6>
    16ee:	89 e1       	ldi	r24, 0x19	; 25
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9a 8b       	std	Y+18, r25	; 0x12
    16f4:	89 8b       	std	Y+17, r24	; 0x11
    16f6:	89 89       	ldd	r24, Y+17	; 0x11
    16f8:	9a 89       	ldd	r25, Y+18	; 0x12
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <main+0xbb4>
    16fe:	9a 8b       	std	Y+18, r25	; 0x12
    1700:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <main+0xba8>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <main+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6d 89       	ldd	r22, Y+21	; 0x15
    1718:	7e 89       	ldd	r23, Y+22	; 0x16
    171a:	8f 89       	ldd	r24, Y+23	; 0x17
    171c:	98 8d       	ldd	r25, Y+24	; 0x18
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	98 8b       	std	Y+16, r25	; 0x10
    1730:	8f 87       	std	Y+15, r24	; 0x0f
    1732:	8f 85       	ldd	r24, Y+15	; 0x0f
    1734:	98 89       	ldd	r25, Y+16	; 0x10
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <main+0xbf0>
    173a:	98 8b       	std	Y+16, r25	; 0x10
    173c:	8f 87       	std	Y+15, r24	; 0x0f
	  		_delay_ms(1000); /* 2 second display error  */
	  		LCD_clearScreen();
    173e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LCD_clearScreen>
	  		  LCD_displayStringRowColumn(1,4,"PassWord");
    1742:	22 e2       	ldi	r18, 0x22	; 34
    1744:	31 e0       	ldi	r19, 0x01	; 1
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	64 e0       	ldi	r22, 0x04	; 4
    174a:	a9 01       	movw	r20, r18
    174c:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
	  		  LCD_displayStringRowColumn(2,3,"Not Change");
    1750:	2b e2       	ldi	r18, 0x2B	; 43
    1752:	31 e0       	ldi	r19, 0x01	; 1
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	63 e0       	ldi	r22, 0x03	; 3
    1758:	a9 01       	movw	r20, r18
    175a:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayStringRowColumn>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	aa ef       	ldi	r26, 0xFA	; 250
    1764:	b4 e4       	ldi	r27, 0x44	; 68
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	9c 87       	std	Y+12, r25	; 0x0c
    176a:	ad 87       	std	Y+13, r26	; 0x0d
    176c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1770:	7c 85       	ldd	r23, Y+12	; 0x0c
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	53 e4       	ldi	r21, 0x43	; 67
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8f 83       	std	Y+7, r24	; 0x07
    1788:	98 87       	std	Y+8, r25	; 0x08
    178a:	a9 87       	std	Y+9, r26	; 0x09
    178c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <main+0xc6a>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <main+0xce8>
	else if (__tmp > 65535)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <main+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <main+0xcca>
    17f2:	89 e1       	ldi	r24, 0x19	; 25
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <main+0xcb8>
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <main+0xcac>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <main+0xcfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <main+0xcf4>
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
	  		_delay_ms(2000); /* 2 second display error  */

			message_flag = 0;
    1842:	fe 01       	movw	r30, r28
    1844:	ee 58       	subi	r30, 0x8E	; 142
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	10 82       	st	Z, r1
    184a:	c5 c9       	rjmp	.-3190   	; 0xbd6 <main+0x90>

0000184c <eepromWriteByte>:
 *******************************************************************************/

#include "Internal_eeprom_avr.h"

void eepromWriteByte(uint16 u16addr, uint8 u8data)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <eepromWriteByte+0x6>
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write */
	while (EECR & (1 << EEWE))
    185e:	ec e3       	ldi	r30, 0x3C	; 60
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	82 70       	andi	r24, 0x02	; 2
    186a:	90 70       	andi	r25, 0x00	; 0
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	b9 f7       	brne	.-18     	; 0x185e <eepromWriteByte+0x12>
		;
	/* Set up address and data registers */
	EEAR = u16addr;
    1870:	ee e3       	ldi	r30, 0x3E	; 62
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
	EEDR = u8data;
    187c:	ed e3       	ldi	r30, 0x3D	; 61
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
    1884:	ac e3       	ldi	r26, 0x3C	; 60
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ec e3       	ldi	r30, 0x3C	; 60
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	84 60       	ori	r24, 0x04	; 4
    1890:	8c 93       	st	X, r24
	/* Start EEPROM write by setting EEWE */
	EECR |= (1 << EEWE);
    1892:	ac e3       	ldi	r26, 0x3C	; 60
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ec e3       	ldi	r30, 0x3C	; 60
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	82 60       	ori	r24, 0x02	; 2
    189e:	8c 93       	st	X, r24
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <eepromReadByte>:

void eepromReadByte(uint16 u16addr, uint8 *u8data)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <eepromReadByte+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <eepromReadByte+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	7c 83       	std	Y+4, r23	; 0x04
    18be:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while (EECR & (1 << EEWE))
    18c0:	ec e3       	ldi	r30, 0x3C	; 60
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	82 70       	andi	r24, 0x02	; 2
    18cc:	90 70       	andi	r25, 0x00	; 0
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	b9 f7       	brne	.-18     	; 0x18c0 <eepromReadByte+0x14>
		;
	/* Set up address register */
	EEAR = u16addr;
    18d2:	ee e3       	ldi	r30, 0x3E	; 62
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    18de:	ac e3       	ldi	r26, 0x3C	; 60
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ec e3       	ldi	r30, 0x3C	; 60
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	81 60       	ori	r24, 0x01	; 1
    18ea:	8c 93       	st	X, r24
	/* Return data from data register */
	 *u8data = EEDR ;
    18ec:	ed e3       	ldi	r30, 0x3D	; 61
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	80 83       	st	Z, r24
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <getPassword>:
 *******************************************************************************/
#include "Password.h"
#include <util/delay.h>

void getPassword(uint8 array_passward[]) // function take passward from user
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	62 97       	sbiw	r28, 0x12	; 18
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	9a 8b       	std	Y+18, r25	; 0x12
    191c:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++)
    191e:	18 8a       	std	Y+16, r1	; 0x10
    1920:	a0 c0       	rjmp	.+320    	; 0x1a62 <getPassword+0x15c>
	{
	  key = KeyPad_getPressedKey(); //function Key Oad from(driver Keypad).from file kepad.c
    1922:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <KeyPad_getPressedKey>
    1926:	8f 87       	std	Y+15, r24	; 0x0f

		 if ((key >= 0) && (key <= 9))
    1928:	8f 85       	ldd	r24, Y+15	; 0x0f
    192a:	8a 30       	cpi	r24, 0x0A	; 10
    192c:	60 f4       	brcc	.+24     	; 0x1946 <getPassword+0x40>
		{
			 array_passward[i] = key;
    192e:	88 89       	ldd	r24, Y+16	; 0x10
    1930:	28 2f       	mov	r18, r24
    1932:	33 27       	eor	r19, r19
    1934:	27 fd       	sbrc	r18, 7
    1936:	30 95       	com	r19
    1938:	89 89       	ldd	r24, Y+17	; 0x11
    193a:	9a 89       	ldd	r25, Y+18	; 0x12
    193c:	fc 01       	movw	r30, r24
    193e:	e2 0f       	add	r30, r18
    1940:	f3 1f       	adc	r31, r19
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	80 83       	st	Z, r24
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a6 e9       	ldi	r26, 0x96	; 150
    194c:	b3 e4       	ldi	r27, 0x43	; 67
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	ad 87       	std	Y+13, r26	; 0x0d
    1954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 83       	std	Y+7, r24	; 0x07
    1970:	98 87       	std	Y+8, r25	; 0x08
    1972:	a9 87       	std	Y+9, r26	; 0x09
    1974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <getPassword+0x92>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <getPassword+0x110>
	else if (__tmp > 65535)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <getPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <getPassword+0xf2>
    19da:	89 e1       	ldi	r24, 0x19	; 25
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <getPassword+0xe0>
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <getPassword+0xd4>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <getPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <getPassword+0x11c>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
		}

		        _delay_ms(300); /* Press time */
				LCD_goToRowColumn(3,5+i); // to display password in middle lcd
    1a2a:	88 89       	ldd	r24, Y+16	; 0x10
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	9b 5f       	subi	r25, 0xFB	; 251
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	69 2f       	mov	r22, r25
    1a34:	0e 94 55 18 	call	0x30aa	; 0x30aa <LCD_goToRowColumn>
	     		LCD_displayCharacter('*');
    1a38:	8a e2       	ldi	r24, 0x2A	; 42
    1a3a:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_displayCharacter>

		  if (i == 4)
    1a3e:	88 89       	ldd	r24, Y+16	; 0x10
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	61 f4       	brne	.+24     	; 0x1a5c <getPassword+0x156>
		{
			key = KeyPad_getPressedKey();
    1a44:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <KeyPad_getPressedKey>
    1a48:	8f 87       	std	Y+15, r24	; 0x0f
			if (key == 13)  /* ASCII of Enter */
    1a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4c:	8d 30       	cpi	r24, 0x0D	; 13
    1a4e:	69 f0       	breq	.+26     	; 0x1a6a <getPassword+0x164>
			{
				break;
			}
			else
			{ /*  if Pressed to any PassWord else Enter not do every thing */
				LCD_displayCharacter(' ');
    1a50:	80 e2       	ldi	r24, 0x20	; 32
    1a52:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_displayCharacter>
				    i--;
    1a56:	88 89       	ldd	r24, Y+16	; 0x10
    1a58:	81 50       	subi	r24, 0x01	; 1
    1a5a:	88 8b       	std	Y+16, r24	; 0x10

void getPassword(uint8 array_passward[]) // function take passward from user
{
	sint8 i;
	uint8 key;
	for (i = 0; i < 5; i++)
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	88 8b       	std	Y+16, r24	; 0x10
    1a62:	88 89       	ldd	r24, Y+16	; 0x10
    1a64:	85 30       	cpi	r24, 0x05	; 5
    1a66:	0c f4       	brge	.+2      	; 0x1a6a <getPassword+0x164>
    1a68:	5c cf       	rjmp	.-328    	; 0x1922 <getPassword+0x1c>
				    i--;
			}
		}

	}
}
    1a6a:	62 96       	adiw	r28, 0x12	; 18
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <prepareToSend>:

/* This function to attach the # in end Password that meaning the end message to MC2
 understand that  */
void prepareToSend(uint8 array[], uint8 array_to_send[])
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <prepareToSend+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <prepareToSend+0x8>
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	9b 83       	std	Y+3, r25	; 0x03
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
    1a8e:	7d 83       	std	Y+5, r23	; 0x05
    1a90:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i = 0;
    1a92:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 6; i++)
    1a94:	19 82       	std	Y+1, r1	; 0x01
    1a96:	28 c0       	rjmp	.+80     	; 0x1ae8 <prepareToSend+0x6c>
	{
		array_to_send[i] = array[i];
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	33 27       	eor	r19, r19
    1a9e:	27 fd       	sbrc	r18, 7
    1aa0:	30 95       	com	r19
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	a2 0f       	add	r26, r18
    1aaa:	b3 1f       	adc	r27, r19
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	33 27       	eor	r19, r19
    1ab2:	27 fd       	sbrc	r18, 7
    1ab4:	30 95       	com	r19
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	fc 01       	movw	r30, r24
    1abc:	e2 0f       	add	r30, r18
    1abe:	f3 1f       	adc	r31, r19
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8c 93       	st	X, r24
		if (i == 5)
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	85 30       	cpi	r24, 0x05	; 5
    1ac8:	61 f4       	brne	.+24     	; 0x1ae2 <prepareToSend+0x66>
		{
			array_to_send[i] = '#';
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	33 27       	eor	r19, r19
    1ad0:	27 fd       	sbrc	r18, 7
    1ad2:	30 95       	com	r19
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e2 0f       	add	r30, r18
    1adc:	f3 1f       	adc	r31, r19
    1ade:	83 e2       	ldi	r24, 0x23	; 35
    1ae0:	80 83       	st	Z, r24
/* This function to attach the # in end Password that meaning the end message to MC2
 understand that  */
void prepareToSend(uint8 array[], uint8 array_to_send[])
{
	sint8 i = 0;
	for (i = 0; i < 6; i++)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	86 30       	cpi	r24, 0x06	; 6
    1aec:	ac f2       	brlt	.-86     	; 0x1a98 <prepareToSend+0x1c>
		if (i == 5)
		{
			array_to_send[i] = '#';
		}
	}
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <timer0_init_normal_mode>:
 * so put initial timer counter=0  0 --> 255 (256ms per overflow)
 * so we need timer to overflow 4 times to get a 1 second
 */

void timer0_init_normal_mode(void)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; //timer initial value
    1b06:	e2 e5       	ldi	r30, 0x52	; 82
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0); //enable overflow interrupt
    1b0c:	a9 e5       	ldi	r26, 0x59	; 89
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e9 e5       	ldi	r30, 0x59	; 89
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	81 60       	ori	r24, 0x01	; 1
    1b18:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1 << FOC0) | (1 << CS02) | (1 << CS00);
    1b1a:	e3 e5       	ldi	r30, 0x53	; 83
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	85 e8       	ldi	r24, 0x85	; 133
    1b20:	80 83       	st	Z, r24
	second = 0;
    1b22:	10 92 3f 01 	sts	0x013F, r1
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    1b2c:	1f 92       	push	r1
    1b2e:	0f 92       	push	r0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	0f 92       	push	r0
    1b34:	11 24       	eor	r1, r1
    1b36:	8f 93       	push	r24
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1b40:	80 91 40 01 	lds	r24, 0x0140
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	80 93 40 01 	sts	0x0140, r24
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    1b4a:	80 91 40 01 	lds	r24, 0x0140
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <__vector_9+0x34>
	{
		second++;
    1b52:	80 91 3f 01 	lds	r24, 0x013F
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 3f 01 	sts	0x013F, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    1b5c:	10 92 40 01 	sts	0x0140, r1
	}
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	8f 91       	pop	r24
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1b78:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <TWI_init>
}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <EEPROM_writeByte+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <EEPROM_writeByte+0x8>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b94:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1b98:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1b9c:	88 30       	cpi	r24, 0x08	; 8
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <EEPROM_writeByte+0x22>
        return ERROR;
    1ba0:	1c 82       	std	Y+4, r1	; 0x04
    1ba2:	28 c0       	rjmp	.+80     	; 0x1bf4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	80 70       	andi	r24, 0x00	; 0
    1baa:	97 70       	andi	r25, 0x07	; 7
    1bac:	88 0f       	add	r24, r24
    1bae:	89 2f       	mov	r24, r25
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	99 0b       	sbc	r25, r25
    1bb4:	91 95       	neg	r25
    1bb6:	80 6a       	ori	r24, 0xA0	; 160
    1bb8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1bbc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1bc0:	88 31       	cpi	r24, 0x18	; 24
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <EEPROM_writeByte+0x46>
        return ERROR; 
    1bc4:	1c 82       	std	Y+4, r1	; 0x04
    1bc6:	16 c0       	rjmp	.+44     	; 0x1bf4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1bce:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1bd2:	88 32       	cpi	r24, 0x28	; 40
    1bd4:	11 f0       	breq	.+4      	; 0x1bda <EEPROM_writeByte+0x58>
        return ERROR;
    1bd6:	1c 82       	std	Y+4, r1	; 0x04
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1be0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1be4:	88 32       	cpi	r24, 0x28	; 40
    1be6:	11 f0       	breq	.+4      	; 0x1bec <EEPROM_writeByte+0x6a>
        return ERROR;
    1be8:	1c 82       	std	Y+4, r1	; 0x04
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1bec:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <TWI_stop>
	
    return SUCCESS;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	8c 83       	std	Y+4, r24	; 0x04
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <EEPROM_readByte+0x6>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <EEPROM_readByte+0x8>
    1c0c:	0f 92       	push	r0
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	7c 83       	std	Y+4, r23	; 0x04
    1c18:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c1a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1c1e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1c22:	88 30       	cpi	r24, 0x08	; 8
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <EEPROM_readByte+0x26>
        return ERROR;
    1c26:	1d 82       	std	Y+5, r1	; 0x05
    1c28:	44 c0       	rjmp	.+136    	; 0x1cb2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	80 70       	andi	r24, 0x00	; 0
    1c30:	97 70       	andi	r25, 0x07	; 7
    1c32:	88 0f       	add	r24, r24
    1c34:	89 2f       	mov	r24, r25
    1c36:	88 1f       	adc	r24, r24
    1c38:	99 0b       	sbc	r25, r25
    1c3a:	91 95       	neg	r25
    1c3c:	80 6a       	ori	r24, 0xA0	; 160
    1c3e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1c42:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1c46:	88 31       	cpi	r24, 0x18	; 24
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <EEPROM_readByte+0x4a>
        return ERROR;
    1c4a:	1d 82       	std	Y+5, r1	; 0x05
    1c4c:	32 c0       	rjmp	.+100    	; 0x1cb2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1c54:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1c58:	88 32       	cpi	r24, 0x28	; 40
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <EEPROM_readByte+0x5c>
        return ERROR;
    1c5c:	1d 82       	std	Y+5, r1	; 0x05
    1c5e:	29 c0       	rjmp	.+82     	; 0x1cb2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1c60:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1c64:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1c68:	80 31       	cpi	r24, 0x10	; 16
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <EEPROM_readByte+0x6c>
        return ERROR;
    1c6c:	1d 82       	std	Y+5, r1	; 0x05
    1c6e:	21 c0       	rjmp	.+66     	; 0x1cb2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	80 70       	andi	r24, 0x00	; 0
    1c76:	97 70       	andi	r25, 0x07	; 7
    1c78:	88 0f       	add	r24, r24
    1c7a:	89 2f       	mov	r24, r25
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	99 0b       	sbc	r25, r25
    1c80:	91 95       	neg	r25
    1c82:	81 6a       	ori	r24, 0xA1	; 161
    1c84:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1c88:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1c8c:	80 34       	cpi	r24, 0x40	; 64
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <EEPROM_readByte+0x90>
        return ERROR;
    1c90:	1d 82       	std	Y+5, r1	; 0x05
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1c94:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <TWI_readWithNACK>
    1c98:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1c9e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWI_getStatus>
    1ca2:	88 35       	cpi	r24, 0x58	; 88
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <EEPROM_readByte+0xa6>
        return ERROR;
    1ca6:	1d 82       	std	Y+5, r1	; 0x05
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1caa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <TWI_stop>
    return SUCCESS;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1ccc:	e0 e2       	ldi	r30, 0x20	; 32
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	80 83       	st	Z, r24
	TWSR = 0x00;
    1cd4:	e1 e2       	ldi	r30, 0x21	; 33
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1cda:	e2 e2       	ldi	r30, 0x22	; 34
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1ce2:	e6 e5       	ldi	r30, 0x56	; 86
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	80 83       	st	Z, r24
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <TWI_start>:

void TWI_start(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1cf8:	e6 e5       	ldi	r30, 0x56	; 86
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	84 ea       	ldi	r24, 0xA4	; 164
    1cfe:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d00:	e6 e5       	ldi	r30, 0x56	; 86
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	88 23       	and	r24, r24
    1d08:	dc f7       	brge	.-10     	; 0x1d00 <TWI_start+0x10>
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <TWI_stop>:

void TWI_stop(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d18:	e6 e5       	ldi	r30, 0x56	; 86
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	84 e9       	ldi	r24, 0x94	; 148
    1d1e:	80 83       	st	Z, r24
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <TWI_write>:

void TWI_write(uint8 data)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1d32:	e3 e2       	ldi	r30, 0x23	; 35
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d3a:	e6 e5       	ldi	r30, 0x56	; 86
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	84 e8       	ldi	r24, 0x84	; 132
    1d40:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	dc f7       	brge	.-10     	; 0x1d42 <TWI_write+0x1c>
}
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d5c:	e6 e5       	ldi	r30, 0x56	; 86
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	84 ec       	ldi	r24, 0xC4	; 196
    1d62:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d64:	e6 e5       	ldi	r30, 0x56	; 86
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 23       	and	r24, r24
    1d6c:	dc f7       	brge	.-10     	; 0x1d64 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1d6e:	e3 e2       	ldi	r30, 0x23	; 35
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d82:	e6 e5       	ldi	r30, 0x56	; 86
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	84 e8       	ldi	r24, 0x84	; 132
    1d88:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d8a:	e6 e5       	ldi	r30, 0x56	; 86
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 23       	and	r24, r24
    1d92:	dc f7       	brge	.-10     	; 0x1d8a <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1d94:	e3 e2       	ldi	r30, 0x23	; 35
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1daa:	e1 e2       	ldi	r30, 0x21	; 33
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 7f       	andi	r24, 0xF8	; 248
    1db2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <KeyPad_getPressedKey+0x6>
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	4c c0       	rjmp	.+152    	; 0x1e64 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1dcc:	ea e3       	ldi	r30, 0x3A	; 58
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	80 e1       	ldi	r24, 0x10	; 16
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <KeyPad_getPressedKey+0x22>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	2a 95       	dec	r18
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <KeyPad_getPressedKey+0x1e>
    1de4:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1de6:	eb e3       	ldi	r30, 0x3B	; 59
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	80 e1       	ldi	r24, 0x10	; 16
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <KeyPad_getPressedKey+0x3e>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <KeyPad_getPressedKey+0x3a>
    1e00:	80 95       	com	r24
    1e02:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	28 c0       	rjmp	.+80     	; 0x1e58 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1e08:	e9 e3       	ldi	r30, 0x39	; 57
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <KeyPad_getPressedKey+0x62>
    1e1c:	55 95       	asr	r21
    1e1e:	47 95       	ror	r20
    1e20:	8a 95       	dec	r24
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <KeyPad_getPressedKey+0x5e>
    1e24:	ca 01       	movw	r24, r20
    1e26:	81 70       	andi	r24, 0x01	; 1
    1e28:	90 70       	andi	r25, 0x00	; 0
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	91 f4       	brne	.+36     	; 0x1e52 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	89 0f       	add	r24, r25
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	84 30       	cpi	r24, 0x04	; 4
    1e5c:	a8 f2       	brcs	.-86     	; 0x1e08 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	8a 83       	std	Y+2, r24	; 0x02
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <KeyPad_getPressedKey+0xae>
    1e6a:	b0 cf       	rjmp	.-160    	; 0x1dcc <KeyPad_getPressedKey+0xe>
    1e6c:	ad cf       	rjmp	.-166    	; 0x1dc8 <KeyPad_getPressedKey+0xa>

00001e6e <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <KeyPad_4x4_adjustKeyNumber+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <KeyPad_4x4_adjustKeyNumber+0x8>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3c 83       	std	Y+4, r19	; 0x04
    1e84:	2b 83       	std	Y+3, r18	; 0x03
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <KeyPad_4x4_adjustKeyNumber+0x24>
    1e90:	70 c0       	rjmp	.+224    	; 0x1f72 <KeyPad_4x4_adjustKeyNumber+0x104>
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	29 30       	cpi	r18, 0x09	; 9
    1e98:	31 05       	cpc	r19, r1
    1e9a:	5c f5       	brge	.+86     	; 0x1ef2 <KeyPad_4x4_adjustKeyNumber+0x84>
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	84 30       	cpi	r24, 0x04	; 4
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1ea6:	59 c0       	rjmp	.+178    	; 0x1f5a <KeyPad_4x4_adjustKeyNumber+0xec>
    1ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1eac:	25 30       	cpi	r18, 0x05	; 5
    1eae:	31 05       	cpc	r19, r1
    1eb0:	9c f4       	brge	.+38     	; 0x1ed8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	91 05       	cpc	r25, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <KeyPad_4x4_adjustKeyNumber+0x50>
    1ebc:	48 c0       	rjmp	.+144    	; 0x1f4e <KeyPad_4x4_adjustKeyNumber+0xe0>
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	23 30       	cpi	r18, 0x03	; 3
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	0c f0       	brlt	.+2      	; 0x1eca <KeyPad_4x4_adjustKeyNumber+0x5c>
    1ec8:	45 c0       	rjmp	.+138    	; 0x1f54 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <KeyPad_4x4_adjustKeyNumber+0x68>
    1ed4:	39 c0       	rjmp	.+114    	; 0x1f48 <KeyPad_4x4_adjustKeyNumber+0xda>
    1ed6:	67 c0       	rjmp	.+206    	; 0x1fa6 <KeyPad_4x4_adjustKeyNumber+0x138>
    1ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eda:	3c 81       	ldd	r19, Y+4	; 0x04
    1edc:	26 30       	cpi	r18, 0x06	; 6
    1ede:	31 05       	cpc	r19, r1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x76>
    1ee2:	41 c0       	rjmp	.+130    	; 0x1f66 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	87 30       	cpi	r24, 0x07	; 7
    1eea:	91 05       	cpc	r25, r1
    1eec:	0c f0       	brlt	.+2      	; 0x1ef0 <KeyPad_4x4_adjustKeyNumber+0x82>
    1eee:	3e c0       	rjmp	.+124    	; 0x1f6c <KeyPad_4x4_adjustKeyNumber+0xfe>
    1ef0:	37 c0       	rjmp	.+110    	; 0x1f60 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	2c 30       	cpi	r18, 0x0C	; 12
    1ef8:	31 05       	cpc	r19, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <KeyPad_4x4_adjustKeyNumber+0x90>
    1efc:	46 c0       	rjmp	.+140    	; 0x1f8a <KeyPad_4x4_adjustKeyNumber+0x11c>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	8d 30       	cpi	r24, 0x0D	; 13
    1f04:	91 05       	cpc	r25, r1
    1f06:	5c f4       	brge	.+22     	; 0x1f1e <KeyPad_4x4_adjustKeyNumber+0xb0>
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	2a 30       	cpi	r18, 0x0A	; 10
    1f0e:	31 05       	cpc	r19, r1
    1f10:	b1 f1       	breq	.+108    	; 0x1f7e <KeyPad_4x4_adjustKeyNumber+0x110>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	8b 30       	cpi	r24, 0x0B	; 11
    1f18:	91 05       	cpc	r25, r1
    1f1a:	a4 f5       	brge	.+104    	; 0x1f84 <KeyPad_4x4_adjustKeyNumber+0x116>
    1f1c:	2d c0       	rjmp	.+90     	; 0x1f78 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	2e 30       	cpi	r18, 0x0E	; 14
    1f24:	31 05       	cpc	r19, r1
    1f26:	b9 f1       	breq	.+110    	; 0x1f96 <KeyPad_4x4_adjustKeyNumber+0x128>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	8e 30       	cpi	r24, 0x0E	; 14
    1f2e:	91 05       	cpc	r25, r1
    1f30:	7c f1       	brlt	.+94     	; 0x1f90 <KeyPad_4x4_adjustKeyNumber+0x122>
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	2f 30       	cpi	r18, 0x0F	; 15
    1f38:	31 05       	cpc	r19, r1
    1f3a:	79 f1       	breq	.+94     	; 0x1f9a <KeyPad_4x4_adjustKeyNumber+0x12c>
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	80 31       	cpi	r24, 0x10	; 16
    1f42:	91 05       	cpc	r25, r1
    1f44:	69 f1       	breq	.+90     	; 0x1fa0 <KeyPad_4x4_adjustKeyNumber+0x132>
    1f46:	2f c0       	rjmp	.+94     	; 0x1fa6 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1f48:	97 e0       	ldi	r25, 0x07	; 7
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	2e c0       	rjmp	.+92     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1f4e:	28 e0       	ldi	r18, 0x08	; 8
    1f50:	2a 83       	std	Y+2, r18	; 0x02
    1f52:	2b c0       	rjmp	.+86     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1f54:	39 e0       	ldi	r19, 0x09	; 9
    1f56:	3a 83       	std	Y+2, r19	; 0x02
    1f58:	28 c0       	rjmp	.+80     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1f5a:	85 e2       	ldi	r24, 0x25	; 37
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    1f5e:	25 c0       	rjmp	.+74     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	22 c0       	rjmp	.+68     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1f66:	25 e0       	ldi	r18, 0x05	; 5
    1f68:	2a 83       	std	Y+2, r18	; 0x02
    1f6a:	1f c0       	rjmp	.+62     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1f6c:	36 e0       	ldi	r19, 0x06	; 6
    1f6e:	3a 83       	std	Y+2, r19	; 0x02
    1f70:	1c c0       	rjmp	.+56     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1f72:	8a e2       	ldi	r24, 0x2A	; 42
    1f74:	8a 83       	std	Y+2, r24	; 0x02
    1f76:	19 c0       	rjmp	.+50     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	16 c0       	rjmp	.+44     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1f7e:	22 e0       	ldi	r18, 0x02	; 2
    1f80:	2a 83       	std	Y+2, r18	; 0x02
    1f82:	13 c0       	rjmp	.+38     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1f84:	33 e0       	ldi	r19, 0x03	; 3
    1f86:	3a 83       	std	Y+2, r19	; 0x02
    1f88:	10 c0       	rjmp	.+32     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1f8a:	8d e2       	ldi	r24, 0x2D	; 45
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	0d c0       	rjmp	.+26     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1f90:	9d e0       	ldi	r25, 0x0D	; 13
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	0a c0       	rjmp	.+20     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1f96:	1a 82       	std	Y+2, r1	; 0x02
    1f98:	08 c0       	rjmp	.+16     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1f9a:	2d e3       	ldi	r18, 0x3D	; 61
    1f9c:	2a 83       	std	Y+2, r18	; 0x02
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1fa0:	3b e2       	ldi	r19, 0x2B	; 43
    1fa2:	3a 83       	std	Y+2, r19	; 0x02
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1fc2:	a7 e3       	ldi	r26, 0x37	; 55
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e7 e3       	ldi	r30, 0x37	; 55
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 67       	ori	r24, 0x70	; 112
    1fce:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1fd0:	a7 e3       	ldi	r26, 0x37	; 55
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e7 e3       	ldi	r30, 0x37	; 55
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 60       	ori	r24, 0x0F	; 15
    1fdc:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1fe4:	88 e2       	ldi	r24, 0x28	; 40
    1fe6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1fea:	8c e0       	ldi	r24, 0x0C	; 12
    1fec:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	c3 56       	subi	r28, 0x63	; 99
    200a:	d0 40       	sbci	r29, 0x00	; 0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	fe 01       	movw	r30, r28
    2018:	ed 59       	subi	r30, 0x9D	; 157
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    201e:	a8 e3       	ldi	r26, 0x38	; 56
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8f 7e       	andi	r24, 0xEF	; 239
    202a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    202c:	a8 e3       	ldi	r26, 0x38	; 56
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 7d       	andi	r24, 0xDF	; 223
    2038:	8c 93       	st	X, r24
    203a:	fe 01       	movw	r30, r28
    203c:	e1 5a       	subi	r30, 0xA1	; 161
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	8e 01       	movw	r16, r28
    2052:	05 5a       	subi	r16, 0xA5	; 165
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	e1 5a       	subi	r30, 0xA1	; 161
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a e7       	ldi	r20, 0x7A	; 122
    206a:	53 e4       	ldi	r21, 0x43	; 67
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	80 83       	st	Z, r24
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	a2 83       	std	Z+2, r26	; 0x02
    207c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207e:	fe 01       	movw	r30, r28
    2080:	e5 5a       	subi	r30, 0xA5	; 165
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	44 f4       	brge	.+16     	; 0x20ac <LCD_sendCommand+0xb0>
		__ticks = 1;
    209c:	fe 01       	movw	r30, r28
    209e:	e7 5a       	subi	r30, 0xA7	; 167
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	64 c0       	rjmp	.+200    	; 0x2174 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    20ac:	fe 01       	movw	r30, r28
    20ae:	e5 5a       	subi	r30, 0xA5	; 165
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	0c f0       	brlt	.+2      	; 0x20cc <LCD_sendCommand+0xd0>
    20ca:	43 c0       	rjmp	.+134    	; 0x2152 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	fe 01       	movw	r30, r28
    20ce:	e1 5a       	subi	r30, 0xA1	; 161
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8e 01       	movw	r16, r28
    20ec:	07 5a       	subi	r16, 0xA7	; 167
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	1f c0       	rjmp	.+62     	; 0x2142 <LCD_sendCommand+0x146>
    2104:	fe 01       	movw	r30, r28
    2106:	e9 5a       	subi	r30, 0xA9	; 169
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	89 e1       	ldi	r24, 0x19	; 25
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	fe 01       	movw	r30, r28
    2114:	e9 5a       	subi	r30, 0xA9	; 169
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x120>
    2120:	fe 01       	movw	r30, r28
    2122:	e9 5a       	subi	r30, 0xA9	; 169
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	de 01       	movw	r26, r28
    212c:	a7 5a       	subi	r26, 0xA7	; 167
    212e:	bf 4f       	sbci	r27, 0xFF	; 255
    2130:	fe 01       	movw	r30, r28
    2132:	e7 5a       	subi	r30, 0xA7	; 167
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	11 96       	adiw	r26, 0x01	; 1
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	fe 01       	movw	r30, r28
    2144:	e7 5a       	subi	r30, 0xA7	; 167
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	d1 f6       	brne	.-76     	; 0x2104 <LCD_sendCommand+0x108>
    2150:	27 c0       	rjmp	.+78     	; 0x21a0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	8e 01       	movw	r16, r28
    2154:	07 5a       	subi	r16, 0xA7	; 167
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e5 5a       	subi	r30, 0xA5	; 165
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	f8 01       	movw	r30, r16
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
    2174:	de 01       	movw	r26, r28
    2176:	ab 5a       	subi	r26, 0xAB	; 171
    2178:	bf 4f       	sbci	r27, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e7 5a       	subi	r30, 0xA7	; 167
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	8d 93       	st	X+, r24
    2186:	9c 93       	st	X, r25
    2188:	fe 01       	movw	r30, r28
    218a:	eb 5a       	subi	r30, 0xAB	; 171
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_sendCommand+0x196>
    2196:	fe 01       	movw	r30, r28
    2198:	eb 5a       	subi	r30, 0xAB	; 171
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    21a0:	a8 e3       	ldi	r26, 0x38	; 56
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e8 e3       	ldi	r30, 0x38	; 56
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 64       	ori	r24, 0x40	; 64
    21ac:	8c 93       	st	X, r24
    21ae:	fe 01       	movw	r30, r28
    21b0:	ef 5a       	subi	r30, 0xAF	; 175
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e8       	ldi	r26, 0x80	; 128
    21ba:	bf e3       	ldi	r27, 0x3F	; 63
    21bc:	80 83       	st	Z, r24
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	a2 83       	std	Z+2, r26	; 0x02
    21c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	8e 01       	movw	r16, r28
    21c6:	03 5b       	subi	r16, 0xB3	; 179
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	ef 5a       	subi	r30, 0xAF	; 175
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a e7       	ldi	r20, 0x7A	; 122
    21de:	53 e4       	ldi	r21, 0x43	; 67
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 83       	st	Z, r24
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	a2 83       	std	Z+2, r26	; 0x02
    21f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f2:	fe 01       	movw	r30, r28
    21f4:	e3 5b       	subi	r30, 0xB3	; 179
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	44 f4       	brge	.+16     	; 0x2220 <LCD_sendCommand+0x224>
		__ticks = 1;
    2210:	fe 01       	movw	r30, r28
    2212:	e5 5b       	subi	r30, 0xB5	; 181
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	64 c0       	rjmp	.+200    	; 0x22e8 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    2220:	fe 01       	movw	r30, r28
    2222:	e3 5b       	subi	r30, 0xB3	; 179
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <LCD_sendCommand+0x244>
    223e:	43 c0       	rjmp	.+134    	; 0x22c6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	fe 01       	movw	r30, r28
    2242:	ef 5a       	subi	r30, 0xAF	; 175
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8e 01       	movw	r16, r28
    2260:	05 5b       	subi	r16, 0xB5	; 181
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	1f c0       	rjmp	.+62     	; 0x22b6 <LCD_sendCommand+0x2ba>
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5b       	subi	r30, 0xB7	; 183
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	89 e1       	ldi	r24, 0x19	; 25
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
    2286:	fe 01       	movw	r30, r28
    2288:	e7 5b       	subi	r30, 0xB7	; 183
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_sendCommand+0x294>
    2294:	fe 01       	movw	r30, r28
    2296:	e7 5b       	subi	r30, 0xB7	; 183
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	de 01       	movw	r26, r28
    22a0:	a5 5b       	subi	r26, 0xB5	; 181
    22a2:	bf 4f       	sbci	r27, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	e5 5b       	subi	r30, 0xB5	; 181
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	11 96       	adiw	r26, 0x01	; 1
    22b2:	9c 93       	st	X, r25
    22b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	fe 01       	movw	r30, r28
    22b8:	e5 5b       	subi	r30, 0xB5	; 181
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	d1 f6       	brne	.-76     	; 0x2278 <LCD_sendCommand+0x27c>
    22c4:	27 c0       	rjmp	.+78     	; 0x2314 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	8e 01       	movw	r16, r28
    22c8:	05 5b       	subi	r16, 0xB5	; 181
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	e3 5b       	subi	r30, 0xB3	; 179
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	f8 01       	movw	r30, r16
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	de 01       	movw	r26, r28
    22ea:	a9 5b       	subi	r26, 0xB9	; 185
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	e5 5b       	subi	r30, 0xB5	; 181
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	8d 93       	st	X+, r24
    22fa:	9c 93       	st	X, r25
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 5b       	subi	r30, 0xB9	; 185
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_sendCommand+0x30a>
    230a:	fe 01       	movw	r30, r28
    230c:	e9 5b       	subi	r30, 0xB9	; 185
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    2314:	a8 e3       	ldi	r26, 0x38	; 56
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e8 e3       	ldi	r30, 0x38	; 56
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	98 2f       	mov	r25, r24
    2320:	90 7f       	andi	r25, 0xF0	; 240
    2322:	fe 01       	movw	r30, r28
    2324:	ed 59       	subi	r30, 0x9D	; 157
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	82 95       	swap	r24
    232c:	8f 70       	andi	r24, 0x0F	; 15
    232e:	89 2b       	or	r24, r25
    2330:	8c 93       	st	X, r24
    2332:	fe 01       	movw	r30, r28
    2334:	ed 5b       	subi	r30, 0xBD	; 189
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e8       	ldi	r26, 0x80	; 128
    233e:	bf e3       	ldi	r27, 0x3F	; 63
    2340:	80 83       	st	Z, r24
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	a2 83       	std	Z+2, r26	; 0x02
    2346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	8e 01       	movw	r16, r28
    234a:	01 5c       	subi	r16, 0xC1	; 193
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	ed 5b       	subi	r30, 0xBD	; 189
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	53 e4       	ldi	r21, 0x43	; 67
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	80 83       	st	Z, r24
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	a2 83       	std	Z+2, r26	; 0x02
    2374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2376:	fe 01       	movw	r30, r28
    2378:	ff 96       	adiw	r30, 0x3f	; 63
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_sendCommand+0x3a0>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e af       	std	Y+62, r25	; 0x3e
    2398:	8d af       	std	Y+61, r24	; 0x3d
    239a:	46 c0       	rjmp	.+140    	; 0x2428 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    239c:	fe 01       	movw	r30, r28
    239e:	ff 96       	adiw	r30, 0x3f	; 63
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	64 f5       	brge	.+88     	; 0x2410 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	fe 01       	movw	r30, r28
    23ba:	ed 5b       	subi	r30, 0xBD	; 189
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e af       	std	Y+62, r25	; 0x3e
    23e4:	8d af       	std	Y+61, r24	; 0x3d
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_sendCommand+0x40a>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c af       	std	Y+60, r25	; 0x3c
    23ee:	8b af       	std	Y+59, r24	; 0x3b
    23f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_sendCommand+0x3f8>
    23f8:	9c af       	std	Y+60, r25	; 0x3c
    23fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e af       	std	Y+62, r25	; 0x3e
    2404:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d ad       	ldd	r24, Y+61	; 0x3d
    2408:	9e ad       	ldd	r25, Y+62	; 0x3e
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_sendCommand+0x3ec>
    240e:	16 c0       	rjmp	.+44     	; 0x243c <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	fe 01       	movw	r30, r28
    2412:	ff 96       	adiw	r30, 0x3f	; 63
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e af       	std	Y+62, r25	; 0x3e
    2426:	8d af       	std	Y+61, r24	; 0x3d
    2428:	8d ad       	ldd	r24, Y+61	; 0x3d
    242a:	9e ad       	ldd	r25, Y+62	; 0x3e
    242c:	9a af       	std	Y+58, r25	; 0x3a
    242e:	89 af       	std	Y+57, r24	; 0x39
    2430:	89 ad       	ldd	r24, Y+57	; 0x39
    2432:	9a ad       	ldd	r25, Y+58	; 0x3a
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_sendCommand+0x438>
    2438:	9a af       	std	Y+58, r25	; 0x3a
    243a:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    243c:	a8 e3       	ldi	r26, 0x38	; 56
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e8 e3       	ldi	r30, 0x38	; 56
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8f 7b       	andi	r24, 0xBF	; 191
    2448:	8c 93       	st	X, r24
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e8       	ldi	r26, 0x80	; 128
    2450:	bf e3       	ldi	r27, 0x3F	; 63
    2452:	8d ab       	std	Y+53, r24	; 0x35
    2454:	9e ab       	std	Y+54, r25	; 0x36
    2456:	af ab       	std	Y+55, r26	; 0x37
    2458:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6d a9       	ldd	r22, Y+53	; 0x35
    245c:	7e a9       	ldd	r23, Y+54	; 0x36
    245e:	8f a9       	ldd	r24, Y+55	; 0x37
    2460:	98 ad       	ldd	r25, Y+56	; 0x38
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	53 e4       	ldi	r21, 0x43	; 67
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	89 ab       	std	Y+49, r24	; 0x31
    2474:	9a ab       	std	Y+50, r25	; 0x32
    2476:	ab ab       	std	Y+51, r26	; 0x33
    2478:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    247a:	69 a9       	ldd	r22, Y+49	; 0x31
    247c:	7a a9       	ldd	r23, Y+50	; 0x32
    247e:	8b a9       	ldd	r24, Y+51	; 0x33
    2480:	9c a9       	ldd	r25, Y+52	; 0x34
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <LCD_sendCommand+0x4a0>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	98 ab       	std	Y+48, r25	; 0x30
    2498:	8f a7       	std	Y+47, r24	; 0x2f
    249a:	3f c0       	rjmp	.+126    	; 0x251a <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    249c:	69 a9       	ldd	r22, Y+49	; 0x31
    249e:	7a a9       	ldd	r23, Y+50	; 0x32
    24a0:	8b a9       	ldd	r24, Y+51	; 0x33
    24a2:	9c a9       	ldd	r25, Y+52	; 0x34
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6d a9       	ldd	r22, Y+53	; 0x35
    24b6:	7e a9       	ldd	r23, Y+54	; 0x36
    24b8:	8f a9       	ldd	r24, Y+55	; 0x37
    24ba:	98 ad       	ldd	r25, Y+56	; 0x38
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	98 ab       	std	Y+48, r25	; 0x30
    24da:	8f a7       	std	Y+47, r24	; 0x2f
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <LCD_sendCommand+0x500>
    24de:	89 e1       	ldi	r24, 0x19	; 25
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9e a7       	std	Y+46, r25	; 0x2e
    24e4:	8d a7       	std	Y+45, r24	; 0x2d
    24e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_sendCommand+0x4ee>
    24ee:	9e a7       	std	Y+46, r25	; 0x2e
    24f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f4:	98 a9       	ldd	r25, Y+48	; 0x30
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	98 ab       	std	Y+48, r25	; 0x30
    24fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <LCD_sendCommand+0x4e2>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	69 a9       	ldd	r22, Y+49	; 0x31
    2508:	7a a9       	ldd	r23, Y+50	; 0x32
    250a:	8b a9       	ldd	r24, Y+51	; 0x33
    250c:	9c a9       	ldd	r25, Y+52	; 0x34
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	98 ab       	std	Y+48, r25	; 0x30
    2518:	8f a7       	std	Y+47, r24	; 0x2f
    251a:	8f a5       	ldd	r24, Y+47	; 0x2f
    251c:	98 a9       	ldd	r25, Y+48	; 0x30
    251e:	9c a7       	std	Y+44, r25	; 0x2c
    2520:	8b a7       	std	Y+43, r24	; 0x2b
    2522:	8b a5       	ldd	r24, Y+43	; 0x2b
    2524:	9c a5       	ldd	r25, Y+44	; 0x2c
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_sendCommand+0x52a>
    252a:	9c a7       	std	Y+44, r25	; 0x2c
    252c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    252e:	a8 e3       	ldi	r26, 0x38	; 56
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e8 e3       	ldi	r30, 0x38	; 56
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 64       	ori	r24, 0x40	; 64
    253a:	8c 93       	st	X, r24
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	8f a3       	std	Y+39, r24	; 0x27
    2546:	98 a7       	std	Y+40, r25	; 0x28
    2548:	a9 a7       	std	Y+41, r26	; 0x29
    254a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6f a1       	ldd	r22, Y+39	; 0x27
    254e:	78 a5       	ldd	r23, Y+40	; 0x28
    2550:	89 a5       	ldd	r24, Y+41	; 0x29
    2552:	9a a5       	ldd	r25, Y+42	; 0x2a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	53 e4       	ldi	r21, 0x43	; 67
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8b a3       	std	Y+35, r24	; 0x23
    2566:	9c a3       	std	Y+36, r25	; 0x24
    2568:	ad a3       	std	Y+37, r26	; 0x25
    256a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <LCD_sendCommand+0x592>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
    258c:	3f c0       	rjmp	.+126    	; 0x260c <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    258e:	6b a1       	ldd	r22, Y+35	; 0x23
    2590:	7c a1       	ldd	r23, Y+36	; 0x24
    2592:	8d a1       	ldd	r24, Y+37	; 0x25
    2594:	9e a1       	ldd	r25, Y+38	; 0x26
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6f a1       	ldd	r22, Y+39	; 0x27
    25a8:	78 a5       	ldd	r23, Y+40	; 0x28
    25aa:	89 a5       	ldd	r24, Y+41	; 0x29
    25ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9a a3       	std	Y+34, r25	; 0x22
    25cc:	89 a3       	std	Y+33, r24	; 0x21
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <LCD_sendCommand+0x5f2>
    25d0:	89 e1       	ldi	r24, 0x19	; 25
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	98 a3       	std	Y+32, r25	; 0x20
    25d6:	8f 8f       	std	Y+31, r24	; 0x1f
    25d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25da:	98 a1       	ldd	r25, Y+32	; 0x20
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_sendCommand+0x5e0>
    25e0:	98 a3       	std	Y+32, r25	; 0x20
    25e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9a a3       	std	Y+34, r25	; 0x22
    25ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	89 a1       	ldd	r24, Y+33	; 0x21
    25f0:	9a a1       	ldd	r25, Y+34	; 0x22
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <LCD_sendCommand+0x5d4>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	89 a3       	std	Y+33, r24	; 0x21
    260c:	89 a1       	ldd	r24, Y+33	; 0x21
    260e:	9a a1       	ldd	r25, Y+34	; 0x22
    2610:	9e 8f       	std	Y+30, r25	; 0x1e
    2612:	8d 8f       	std	Y+29, r24	; 0x1d
    2614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2616:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_sendCommand+0x61c>
    261c:	9e 8f       	std	Y+30, r25	; 0x1e
    261e:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    2620:	a8 e3       	ldi	r26, 0x38	; 56
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e8 e3       	ldi	r30, 0x38	; 56
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	98 2f       	mov	r25, r24
    262c:	90 7f       	andi	r25, 0xF0	; 240
    262e:	fe 01       	movw	r30, r28
    2630:	ed 59       	subi	r30, 0x9D	; 157
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	8f 70       	andi	r24, 0x0F	; 15
    2638:	89 2b       	or	r24, r25
    263a:	8c 93       	st	X, r24
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	89 8f       	std	Y+25, r24	; 0x19
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	ab 8f       	std	Y+27, r26	; 0x1b
    264a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a e7       	ldi	r20, 0x7A	; 122
    265a:	53 e4       	ldi	r21, 0x43	; 67
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d 8b       	std	Y+21, r24	; 0x15
    2666:	9e 8b       	std	Y+22, r25	; 0x16
    2668:	af 8b       	std	Y+23, r26	; 0x17
    266a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <LCD_sendCommand+0x692>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	3f c0       	rjmp	.+126    	; 0x270c <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	69 8d       	ldd	r22, Y+25	; 0x19
    26a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_sendCommand+0x6f2>
    26d0:	89 e1       	ldi	r24, 0x19	; 25
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_sendCommand+0x6e0>
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_sendCommand+0x6d4>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_sendCommand+0x71c>
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2720:	a8 e3       	ldi	r26, 0x38	; 56
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e8 e3       	ldi	r30, 0x38	; 56
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	8f 7b       	andi	r24, 0xBF	; 191
    272c:	8c 93       	st	X, r24
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 e8       	ldi	r26, 0x80	; 128
    2734:	bf e3       	ldi	r27, 0x3F	; 63
    2736:	8b 87       	std	Y+11, r24	; 0x0b
    2738:	9c 87       	std	Y+12, r25	; 0x0c
    273a:	ad 87       	std	Y+13, r26	; 0x0d
    273c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	98 87       	std	Y+8, r25	; 0x08
    275a:	a9 87       	std	Y+9, r26	; 0x09
    275c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <LCD_sendCommand+0x784>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	6b 85       	ldd	r22, Y+11	; 0x0b
    279a:	7c 85       	ldd	r23, Y+12	; 0x0c
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <LCD_sendCommand+0x7e4>
    27c2:	89 e1       	ldi	r24, 0x19	; 25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_sendCommand+0x7d2>
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <LCD_sendCommand+0x7c6>
    27e8:	14 c0       	rjmp	.+40     	; 0x2812 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_sendCommand+0x80e>
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2812:	cd 59       	subi	r28, 0x9D	; 157
    2814:	df 4f       	sbci	r29, 0xFF	; 255
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	c3 56       	subi	r28, 0x63	; 99
    2838:	d0 40       	sbci	r29, 0x00	; 0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	fe 01       	movw	r30, r28
    2846:	ed 59       	subi	r30, 0x9D	; 157
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    284c:	a8 e3       	ldi	r26, 0x38	; 56
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e8 e3       	ldi	r30, 0x38	; 56
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 61       	ori	r24, 0x10	; 16
    2858:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    285a:	a8 e3       	ldi	r26, 0x38	; 56
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e8 e3       	ldi	r30, 0x38	; 56
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	8f 7d       	andi	r24, 0xDF	; 223
    2866:	8c 93       	st	X, r24
    2868:	fe 01       	movw	r30, r28
    286a:	e1 5a       	subi	r30, 0xA1	; 161
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 e8       	ldi	r26, 0x80	; 128
    2874:	bf e3       	ldi	r27, 0x3F	; 63
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	8e 01       	movw	r16, r28
    2880:	05 5a       	subi	r16, 0xA5	; 165
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	e1 5a       	subi	r30, 0xA1	; 161
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a e7       	ldi	r20, 0x7A	; 122
    2898:	53 e4       	ldi	r21, 0x43	; 67
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 83       	st	Z, r24
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	a2 83       	std	Z+2, r26	; 0x02
    28aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e5 5a       	subi	r30, 0xA5	; 165
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	44 f4       	brge	.+16     	; 0x28da <LCD_displayCharacter+0xb0>
		__ticks = 1;
    28ca:	fe 01       	movw	r30, r28
    28cc:	e7 5a       	subi	r30, 0xA7	; 167
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	64 c0       	rjmp	.+200    	; 0x29a2 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 5a       	subi	r30, 0xA5	; 165
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	0c f0       	brlt	.+2      	; 0x28fa <LCD_displayCharacter+0xd0>
    28f8:	43 c0       	rjmp	.+134    	; 0x2980 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	fe 01       	movw	r30, r28
    28fc:	e1 5a       	subi	r30, 0xA1	; 161
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8e 01       	movw	r16, r28
    291a:	07 5a       	subi	r16, 0xA7	; 167
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	1f c0       	rjmp	.+62     	; 0x2970 <LCD_displayCharacter+0x146>
    2932:	fe 01       	movw	r30, r28
    2934:	e9 5a       	subi	r30, 0xA9	; 169
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	89 e1       	ldi	r24, 0x19	; 25
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	fe 01       	movw	r30, r28
    2942:	e9 5a       	subi	r30, 0xA9	; 169
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_displayCharacter+0x120>
    294e:	fe 01       	movw	r30, r28
    2950:	e9 5a       	subi	r30, 0xA9	; 169
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	de 01       	movw	r26, r28
    295a:	a7 5a       	subi	r26, 0xA7	; 167
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e7 5a       	subi	r30, 0xA7	; 167
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	11 96       	adiw	r26, 0x01	; 1
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	fe 01       	movw	r30, r28
    2972:	e7 5a       	subi	r30, 0xA7	; 167
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	d1 f6       	brne	.-76     	; 0x2932 <LCD_displayCharacter+0x108>
    297e:	27 c0       	rjmp	.+78     	; 0x29ce <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	8e 01       	movw	r16, r28
    2982:	07 5a       	subi	r16, 0xA7	; 167
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	e5 5a       	subi	r30, 0xA5	; 165
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	de 01       	movw	r26, r28
    29a4:	ab 5a       	subi	r26, 0xAB	; 171
    29a6:	bf 4f       	sbci	r27, 0xFF	; 255
    29a8:	fe 01       	movw	r30, r28
    29aa:	e7 5a       	subi	r30, 0xA7	; 167
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	8d 93       	st	X+, r24
    29b4:	9c 93       	st	X, r25
    29b6:	fe 01       	movw	r30, r28
    29b8:	eb 5a       	subi	r30, 0xAB	; 171
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_displayCharacter+0x196>
    29c4:	fe 01       	movw	r30, r28
    29c6:	eb 5a       	subi	r30, 0xAB	; 171
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    29ce:	a8 e3       	ldi	r26, 0x38	; 56
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e8 e3       	ldi	r30, 0x38	; 56
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 64       	ori	r24, 0x40	; 64
    29da:	8c 93       	st	X, r24
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5a       	subi	r30, 0xAF	; 175
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a0 e8       	ldi	r26, 0x80	; 128
    29e8:	bf e3       	ldi	r27, 0x3F	; 63
    29ea:	80 83       	st	Z, r24
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	a2 83       	std	Z+2, r26	; 0x02
    29f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	8e 01       	movw	r16, r28
    29f4:	03 5b       	subi	r16, 0xB3	; 179
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	ef 5a       	subi	r30, 0xAF	; 175
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a e7       	ldi	r20, 0x7A	; 122
    2a0c:	53 e4       	ldi	r21, 0x43	; 67
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	f8 01       	movw	r30, r16
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 5b       	subi	r30, 0xB3	; 179
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	44 f4       	brge	.+16     	; 0x2a4e <LCD_displayCharacter+0x224>
		__ticks = 1;
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e5 5b       	subi	r30, 0xB5	; 181
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	64 c0       	rjmp	.+200    	; 0x2b16 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e3 5b       	subi	r30, 0xB3	; 179
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	57 e4       	ldi	r21, 0x47	; 71
    2a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <LCD_displayCharacter+0x244>
    2a6c:	43 c0       	rjmp	.+134    	; 0x2af4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ef 5a       	subi	r30, 0xAF	; 175
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	8e 01       	movw	r16, r28
    2a8e:	05 5b       	subi	r16, 0xB5	; 181
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	1f c0       	rjmp	.+62     	; 0x2ae4 <LCD_displayCharacter+0x2ba>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 5b       	subi	r30, 0xB7	; 183
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	89 e1       	ldi	r24, 0x19	; 25
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e7 5b       	subi	r30, 0xB7	; 183
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_displayCharacter+0x294>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e7 5b       	subi	r30, 0xB7	; 183
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	de 01       	movw	r26, r28
    2ace:	a5 5b       	subi	r26, 0xB5	; 181
    2ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 5b       	subi	r30, 0xB5	; 181
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	11 96       	adiw	r26, 0x01	; 1
    2ae0:	9c 93       	st	X, r25
    2ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 5b       	subi	r30, 0xB5	; 181
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	d1 f6       	brne	.-76     	; 0x2aa6 <LCD_displayCharacter+0x27c>
    2af2:	27 c0       	rjmp	.+78     	; 0x2b42 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	8e 01       	movw	r16, r28
    2af6:	05 5b       	subi	r16, 0xB5	; 181
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	fe 01       	movw	r30, r28
    2afc:	e3 5b       	subi	r30, 0xB3	; 179
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	de 01       	movw	r26, r28
    2b18:	a9 5b       	subi	r26, 0xB9	; 185
    2b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e5 5b       	subi	r30, 0xB5	; 181
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	8d 93       	st	X+, r24
    2b28:	9c 93       	st	X, r25
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e9 5b       	subi	r30, 0xB9	; 185
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_displayCharacter+0x30a>
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e9 5b       	subi	r30, 0xB9	; 185
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    2b42:	a8 e3       	ldi	r26, 0x38	; 56
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e8 e3       	ldi	r30, 0x38	; 56
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	98 2f       	mov	r25, r24
    2b4e:	90 7f       	andi	r25, 0xF0	; 240
    2b50:	fe 01       	movw	r30, r28
    2b52:	ed 59       	subi	r30, 0x9D	; 157
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	82 95       	swap	r24
    2b5a:	8f 70       	andi	r24, 0x0F	; 15
    2b5c:	89 2b       	or	r24, r25
    2b5e:	8c 93       	st	X, r24
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a0 e8       	ldi	r26, 0x80	; 128
    2b6c:	bf e3       	ldi	r27, 0x3F	; 63
    2b6e:	80 83       	st	Z, r24
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	a2 83       	std	Z+2, r26	; 0x02
    2b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	8e 01       	movw	r16, r28
    2b78:	01 5c       	subi	r16, 0xC1	; 193
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ed 5b       	subi	r30, 0xBD	; 189
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a e7       	ldi	r20, 0x7A	; 122
    2b90:	53 e4       	ldi	r21, 0x43	; 67
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 83       	st	Z, r24
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	a2 83       	std	Z+2, r26	; 0x02
    2ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ff 96       	adiw	r30, 0x3f	; 63
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e af       	std	Y+62, r25	; 0x3e
    2bc6:	8d af       	std	Y+61, r24	; 0x3d
    2bc8:	46 c0       	rjmp	.+140    	; 0x2c56 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ff 96       	adiw	r30, 0x3f	; 63
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	64 f5       	brge	.+88     	; 0x2c3e <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 5b       	subi	r30, 0xBD	; 189
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e af       	std	Y+62, r25	; 0x3e
    2c12:	8d af       	std	Y+61, r24	; 0x3d
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <LCD_displayCharacter+0x40a>
    2c16:	89 e1       	ldi	r24, 0x19	; 25
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9c af       	std	Y+60, r25	; 0x3c
    2c1c:	8b af       	std	Y+59, r24	; 0x3b
    2c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c20:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_displayCharacter+0x3f8>
    2c26:	9c af       	std	Y+60, r25	; 0x3c
    2c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9e af       	std	Y+62, r25	; 0x3e
    2c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <LCD_displayCharacter+0x3ec>
    2c3c:	16 c0       	rjmp	.+44     	; 0x2c6a <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ff 96       	adiw	r30, 0x3f	; 63
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9e af       	std	Y+62, r25	; 0x3e
    2c54:	8d af       	std	Y+61, r24	; 0x3d
    2c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c5a:	9a af       	std	Y+58, r25	; 0x3a
    2c5c:	89 af       	std	Y+57, r24	; 0x39
    2c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c60:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_displayCharacter+0x438>
    2c66:	9a af       	std	Y+58, r25	; 0x3a
    2c68:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2c6a:	a8 e3       	ldi	r26, 0x38	; 56
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e8 e3       	ldi	r30, 0x38	; 56
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8f 7b       	andi	r24, 0xBF	; 191
    2c76:	8c 93       	st	X, r24
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	8d ab       	std	Y+53, r24	; 0x35
    2c82:	9e ab       	std	Y+54, r25	; 0x36
    2c84:	af ab       	std	Y+55, r26	; 0x37
    2c86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6d a9       	ldd	r22, Y+53	; 0x35
    2c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	53 e4       	ldi	r21, 0x43	; 67
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	89 ab       	std	Y+49, r24	; 0x31
    2ca2:	9a ab       	std	Y+50, r25	; 0x32
    2ca4:	ab ab       	std	Y+51, r26	; 0x33
    2ca6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    2caa:	7a a9       	ldd	r23, Y+50	; 0x32
    2cac:	8b a9       	ldd	r24, Y+51	; 0x33
    2cae:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    2cca:	69 a9       	ldd	r22, Y+49	; 0x31
    2ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cce:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	98 ab       	std	Y+48, r25	; 0x30
    2d08:	8f a7       	std	Y+47, r24	; 0x2f
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_displayCharacter+0x500>
    2d0c:	89 e1       	ldi	r24, 0x19	; 25
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9e a7       	std	Y+46, r25	; 0x2e
    2d12:	8d a7       	std	Y+45, r24	; 0x2d
    2d14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x4ee>
    2d1c:	9e a7       	std	Y+46, r25	; 0x2e
    2d1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d22:	98 a9       	ldd	r25, Y+48	; 0x30
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	98 ab       	std	Y+48, r25	; 0x30
    2d28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_displayCharacter+0x4e2>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	69 a9       	ldd	r22, Y+49	; 0x31
    2d36:	7a a9       	ldd	r23, Y+50	; 0x32
    2d38:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	98 ab       	std	Y+48, r25	; 0x30
    2d46:	8f a7       	std	Y+47, r24	; 0x2f
    2d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4c:	9c a7       	std	Y+44, r25	; 0x2c
    2d4e:	8b a7       	std	Y+43, r24	; 0x2b
    2d50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_displayCharacter+0x52a>
    2d58:	9c a7       	std	Y+44, r25	; 0x2c
    2d5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2d5c:	a8 e3       	ldi	r26, 0x38	; 56
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e8 e3       	ldi	r30, 0x38	; 56
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	80 64       	ori	r24, 0x40	; 64
    2d68:	8c 93       	st	X, r24
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a0 e8       	ldi	r26, 0x80	; 128
    2d70:	bf e3       	ldi	r27, 0x3F	; 63
    2d72:	8f a3       	std	Y+39, r24	; 0x27
    2d74:	98 a7       	std	Y+40, r25	; 0x28
    2d76:	a9 a7       	std	Y+41, r26	; 0x29
    2d78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	4a e7       	ldi	r20, 0x7A	; 122
    2d88:	53 e4       	ldi	r21, 0x43	; 67
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	8b a3       	std	Y+35, r24	; 0x23
    2d94:	9c a3       	std	Y+36, r25	; 0x24
    2d96:	ad a3       	std	Y+37, r26	; 0x25
    2d98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2da0:	9e a1       	ldd	r25, Y+38	; 0x26
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	2c f4       	brge	.+10     	; 0x2dbc <LCD_displayCharacter+0x592>
		__ticks = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9a a3       	std	Y+34, r25	; 0x22
    2db8:	89 a3       	std	Y+33, r24	; 0x21
    2dba:	3f c0       	rjmp	.+126    	; 0x2e3a <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    2dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	4c f5       	brge	.+82     	; 0x2e26 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd4:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd6:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9a a3       	std	Y+34, r25	; 0x22
    2dfa:	89 a3       	std	Y+33, r24	; 0x21
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <LCD_displayCharacter+0x5f2>
    2dfe:	89 e1       	ldi	r24, 0x19	; 25
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	98 a3       	std	Y+32, r25	; 0x20
    2e04:	8f 8f       	std	Y+31, r24	; 0x1f
    2e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e08:	98 a1       	ldd	r25, Y+32	; 0x20
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_displayCharacter+0x5e0>
    2e0e:	98 a3       	std	Y+32, r25	; 0x20
    2e10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e12:	89 a1       	ldd	r24, Y+33	; 0x21
    2e14:	9a a1       	ldd	r25, Y+34	; 0x22
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	9a a3       	std	Y+34, r25	; 0x22
    2e1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <LCD_displayCharacter+0x5d4>
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e26:	6b a1       	ldd	r22, Y+35	; 0x23
    2e28:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	9a a3       	std	Y+34, r25	; 0x22
    2e38:	89 a3       	std	Y+33, r24	; 0x21
    2e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e40:	8d 8f       	std	Y+29, r24	; 0x1d
    2e42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <LCD_displayCharacter+0x61c>
    2e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2e4e:	a8 e3       	ldi	r26, 0x38	; 56
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e8 e3       	ldi	r30, 0x38	; 56
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	98 2f       	mov	r25, r24
    2e5a:	90 7f       	andi	r25, 0xF0	; 240
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ed 59       	subi	r30, 0x9D	; 157
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	8f 70       	andi	r24, 0x0F	; 15
    2e66:	89 2b       	or	r24, r25
    2e68:	8c 93       	st	X, r24
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 e8       	ldi	r26, 0x80	; 128
    2e70:	bf e3       	ldi	r27, 0x3F	; 63
    2e72:	89 8f       	std	Y+25, r24	; 0x19
    2e74:	9a 8f       	std	Y+26, r25	; 0x1a
    2e76:	ab 8f       	std	Y+27, r26	; 0x1b
    2e78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a e7       	ldi	r20, 0x7A	; 122
    2e88:	53 e4       	ldi	r21, 0x43	; 67
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	8d 8b       	std	Y+21, r24	; 0x15
    2e94:	9e 8b       	std	Y+22, r25	; 0x16
    2e96:	af 8b       	std	Y+23, r26	; 0x17
    2e98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <LCD_displayCharacter+0x692>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9c 8b       	std	Y+20, r25	; 0x14
    2eb8:	8b 8b       	std	Y+19, r24	; 0x13
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    2ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	4c f5       	brge	.+82     	; 0x2f26 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <LCD_displayCharacter+0x6f2>
    2efe:	89 e1       	ldi	r24, 0x19	; 25
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9a 8b       	std	Y+18, r25	; 0x12
    2f04:	89 8b       	std	Y+17, r24	; 0x11
    2f06:	89 89       	ldd	r24, Y+17	; 0x11
    2f08:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <LCD_displayCharacter+0x6e0>
    2f0e:	9a 8b       	std	Y+18, r25	; 0x12
    2f10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	8b 89       	ldd	r24, Y+19	; 0x13
    2f14:	9c 89       	ldd	r25, Y+20	; 0x14
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	9c 8b       	std	Y+20, r25	; 0x14
    2f1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <LCD_displayCharacter+0x6d4>
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	6d 89       	ldd	r22, Y+21	; 0x15
    2f28:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9c 8b       	std	Y+20, r25	; 0x14
    2f38:	8b 8b       	std	Y+19, r24	; 0x13
    2f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3e:	98 8b       	std	Y+16, r25	; 0x10
    2f40:	8f 87       	std	Y+15, r24	; 0x0f
    2f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f44:	98 89       	ldd	r25, Y+16	; 0x10
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_displayCharacter+0x71c>
    2f4a:	98 8b       	std	Y+16, r25	; 0x10
    2f4c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2f4e:	a8 e3       	ldi	r26, 0x38	; 56
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e8 e3       	ldi	r30, 0x38	; 56
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 7b       	andi	r24, 0xBF	; 191
    2f5a:	8c 93       	st	X, r24
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a0 e8       	ldi	r26, 0x80	; 128
    2f62:	bf e3       	ldi	r27, 0x3F	; 63
    2f64:	8b 87       	std	Y+11, r24	; 0x0b
    2f66:	9c 87       	std	Y+12, r25	; 0x0c
    2f68:	ad 87       	std	Y+13, r26	; 0x0d
    2f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	4a e7       	ldi	r20, 0x7A	; 122
    2f7a:	53 e4       	ldi	r21, 0x43	; 67
    2f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8f 83       	std	Y+7, r24	; 0x07
    2f86:	98 87       	std	Y+8, r25	; 0x08
    2f88:	a9 87       	std	Y+9, r26	; 0x09
    2f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	2c f4       	brge	.+10     	; 0x2fae <LCD_displayCharacter+0x784>
		__ticks = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	3f c0       	rjmp	.+126    	; 0x302c <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	4c f5       	brge	.+82     	; 0x3018 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e2       	ldi	r20, 0x20	; 32
    2fd4:	51 e4       	ldi	r21, 0x41	; 65
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <LCD_displayCharacter+0x7e4>
    2ff0:	89 e1       	ldi	r24, 0x19	; 25
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_displayCharacter+0x7d2>
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	69 f7       	brne	.-38     	; 0x2ff0 <LCD_displayCharacter+0x7c6>
    3016:	14 c0       	rjmp	.+40     	; 0x3040 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	9e 81       	ldd	r25, Y+6	; 0x06
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_displayCharacter+0x80e>
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3040:	cd 59       	subi	r28, 0x9D	; 157
    3042:	df 4f       	sbci	r29, 0xFF	; 255
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	08 95       	ret

00003058 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	00 d0       	rcall	.+0      	; 0x305e <LCD_displayString+0x6>
    305e:	0f 92       	push	r0
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	9b 83       	std	Y+3, r25	; 0x03
    3066:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3068:	19 82       	std	Y+1, r1	; 0x01
    306a:	0e c0       	rjmp	.+28     	; 0x3088 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	fc 01       	movw	r30, r24
    3078:	e2 0f       	add	r30, r18
    307a:	f3 1f       	adc	r31, r19
    307c:	80 81       	ld	r24, Z
    307e:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_displayCharacter>
		i++;
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	8f 5f       	subi	r24, 0xFF	; 255
    3086:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	fc 01       	movw	r30, r24
    3094:	e2 0f       	add	r30, r18
    3096:	f3 1f       	adc	r31, r19
    3098:	80 81       	ld	r24, Z
    309a:	88 23       	and	r24, r24
    309c:	39 f7       	brne	.-50     	; 0x306c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <LCD_goToRowColumn+0x6>
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <LCD_goToRowColumn+0x8>
    30b2:	0f 92       	push	r0
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	8a 83       	std	Y+2, r24	; 0x02
    30ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	3d 83       	std	Y+5, r19	; 0x05
    30c4:	2c 83       	std	Y+4, r18	; 0x04
    30c6:	8c 81       	ldd	r24, Y+4	; 0x04
    30c8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	91 05       	cpc	r25, r1
    30ce:	c1 f0       	breq	.+48     	; 0x3100 <LCD_goToRowColumn+0x56>
    30d0:	2c 81       	ldd	r18, Y+4	; 0x04
    30d2:	3d 81       	ldd	r19, Y+5	; 0x05
    30d4:	22 30       	cpi	r18, 0x02	; 2
    30d6:	31 05       	cpc	r19, r1
    30d8:	2c f4       	brge	.+10     	; 0x30e4 <LCD_goToRowColumn+0x3a>
    30da:	8c 81       	ldd	r24, Y+4	; 0x04
    30dc:	9d 81       	ldd	r25, Y+5	; 0x05
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	61 f0       	breq	.+24     	; 0x30fa <LCD_goToRowColumn+0x50>
    30e2:	19 c0       	rjmp	.+50     	; 0x3116 <LCD_goToRowColumn+0x6c>
    30e4:	2c 81       	ldd	r18, Y+4	; 0x04
    30e6:	3d 81       	ldd	r19, Y+5	; 0x05
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	69 f0       	breq	.+26     	; 0x3108 <LCD_goToRowColumn+0x5e>
    30ee:	8c 81       	ldd	r24, Y+4	; 0x04
    30f0:	9d 81       	ldd	r25, Y+5	; 0x05
    30f2:	83 30       	cpi	r24, 0x03	; 3
    30f4:	91 05       	cpc	r25, r1
    30f6:	61 f0       	breq	.+24     	; 0x3110 <LCD_goToRowColumn+0x66>
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	0b c0       	rjmp	.+22     	; 0x3116 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	80 5c       	subi	r24, 0xC0	; 192
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	07 c0       	rjmp	.+14     	; 0x3116 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	80 5f       	subi	r24, 0xF0	; 240
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	80 5b       	subi	r24, 0xB0	; 176
    3114:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	80 68       	ori	r24, 0x80	; 128
    311a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
}
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	00 d0       	rcall	.+0      	; 0x3134 <LCD_displayStringRowColumn+0x6>
    3134:	00 d0       	rcall	.+0      	; 0x3136 <LCD_displayStringRowColumn+0x8>
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	6a 83       	std	Y+2, r22	; 0x02
    313e:	5c 83       	std	Y+4, r21	; 0x04
    3140:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	6a 81       	ldd	r22, Y+2	; 0x02
    3146:	0e 94 55 18 	call	0x30aa	; 0x30aa <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	0e 94 2c 18 	call	0x3058	; 0x3058 <LCD_displayString>
}
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	08 95       	ret

00003160 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	62 97       	sbiw	r28, 0x12	; 18
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	9a 8b       	std	Y+18, r25	; 0x12
    3176:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3178:	89 89       	ldd	r24, Y+17	; 0x11
    317a:	9a 89       	ldd	r25, Y+18	; 0x12
    317c:	9e 01       	movw	r18, r28
    317e:	2f 5f       	subi	r18, 0xFF	; 255
    3180:	3f 4f       	sbci	r19, 0xFF	; 255
    3182:	b9 01       	movw	r22, r18
    3184:	4a e0       	ldi	r20, 0x0A	; 10
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	0e 94 0a 1a 	call	0x3414	; 0x3414 <itoa>
   LCD_displayString(buff);
    318c:	ce 01       	movw	r24, r28
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	0e 94 2c 18 	call	0x3058	; 0x3058 <LCD_displayString>
}
    3194:	62 96       	adiw	r28, 0x12	; 18
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_sendCommand>
}
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <UART_init>:


extern volatile uint8 MC_1_recieved;

void UART_init(void)
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1 << U2X); /* U2X = 1 for double transmission speed */
    31c2:	eb e2       	ldi	r30, 0x2B	; 43
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    31ca:	ea e2       	ldi	r30, 0x2A	; 42
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	88 e9       	ldi	r24, 0x98	; 152
    31d0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    31d2:	e0 e4       	ldi	r30, 0x40	; 64
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	86 e8       	ldi	r24, 0x86	; 134
    31d8:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = BAUD_PRESCALE>>8;
    31da:	e0 e4       	ldi	r30, 0x40	; 64
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	10 82       	st	Z, r1
		UBRRL = BAUD_PRESCALE;
    31e0:	e9 e2       	ldi	r30, 0x29	; 41
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	8c e0       	ldi	r24, 0x0C	; 12
    31e6:	80 83       	st	Z, r24
}
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	0f 92       	push	r0
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) 	{	}
    31fa:	eb e2       	ldi	r30, 0x2B	; 43
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	88 2f       	mov	r24, r24
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	80 72       	andi	r24, 0x20	; 32
    3206:	90 70       	andi	r25, 0x00	; 0
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	b9 f3       	breq	.-18     	; 0x31fa <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */
	UDR = data;
    320c:	ec e2       	ldi	r30, 0x2C	; 44
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3214:	0f 90       	pop	r0
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <UART_recieveByte>:

uint8 UART_recieveByte(void) {
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    3224:	eb e2       	ldi	r30, 0x2B	; 43
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	88 23       	and	r24, r24
    322c:	dc f7       	brge	.-10     	; 0x3224 <UART_recieveByte+0x8>
	}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	 will be cleared after read this data */
	return UDR;
    322e:	ec e2       	ldi	r30, 0x2C	; 44
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
}
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <UART_sendString>:

void UART_sendString(const uint8 *Str) {
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	00 d0       	rcall	.+0      	; 0x3240 <UART_sendString+0x6>
    3240:	0f 92       	push	r0
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	9b 83       	std	Y+3, r25	; 0x03
    3248:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    324a:	19 82       	std	Y+1, r1	; 0x01
    324c:	0e c0       	rjmp	.+28     	; 0x326a <UART_sendString+0x30>
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	9b 81       	ldd	r25, Y+3	; 0x03
    3258:	fc 01       	movw	r30, r24
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	80 81       	ld	r24, Z
    3260:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_sendByte>
		i++;
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	9b 81       	ldd	r25, Y+3	; 0x03
    3274:	fc 01       	movw	r30, r24
    3276:	e2 0f       	add	r30, r18
    3278:	f3 1f       	adc	r31, r19
    327a:	80 81       	ld	r24, Z
    327c:	88 23       	and	r24, r24
    327e:	39 f7       	brne	.-50     	; 0x324e <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <UART_receiveString>:

void UART_receiveString(uint8 *Str) {
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <UART_receiveString+0xa>
    3296:	0f 92       	push	r0
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9b 83       	std	Y+3, r25	; 0x03
    329e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32a0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	9b 81       	ldd	r25, Y+3	; 0x03
    32ac:	8c 01       	movw	r16, r24
    32ae:	02 0f       	add	r16, r18
    32b0:	13 1f       	adc	r17, r19
    32b2:	0e 94 0e 19 	call	0x321c	; 0x321c <UART_recieveByte>
    32b6:	f8 01       	movw	r30, r16
    32b8:	80 83       	st	Z, r24
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <UART_receiveString+0x4e>
	while (Str[i] != '#') {
		i++;
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	8f 5f       	subi	r24, 0xFF	; 255
    32c0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	8c 01       	movw	r16, r24
    32ce:	02 0f       	add	r16, r18
    32d0:	13 1f       	adc	r17, r19
    32d2:	0e 94 0e 19 	call	0x321c	; 0x321c <UART_recieveByte>
    32d6:	f8 01       	movw	r30, r16
    32d8:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while (Str[i] != '#') {
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	fc 01       	movw	r30, r24
    32e6:	e2 0f       	add	r30, r18
    32e8:	f3 1f       	adc	r31, r19
    32ea:	80 81       	ld	r24, Z
    32ec:	83 32       	cpi	r24, 0x23	; 35
    32ee:	31 f7       	brne	.-52     	; 0x32bc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	fc 01       	movw	r30, r24
    32fc:	e2 0f       	add	r30, r18
    32fe:	f3 1f       	adc	r31, r19
    3300:	10 82       	st	Z, r1
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <__vector_11>:

/*------------------ ISR For Usart Driver-------------------------------------  */

ISR(USART_RXC_vect)
{
    3312:	1f 92       	push	r1
    3314:	0f 92       	push	r0
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	0f 92       	push	r0
    331a:	11 24       	eor	r1, r1
    331c:	2f 93       	push	r18
    331e:	3f 93       	push	r19
    3320:	4f 93       	push	r20
    3322:	5f 93       	push	r21
    3324:	6f 93       	push	r22
    3326:	7f 93       	push	r23
    3328:	8f 93       	push	r24
    332a:	9f 93       	push	r25
    332c:	af 93       	push	r26
    332e:	bf 93       	push	r27
    3330:	ef 93       	push	r30
    3332:	ff 93       	push	r31
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	0f 92       	push	r0
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
	uint8 message = UART_recieveByte(); /* Recieve message from MC2 */
    333e:	0e 94 0e 19 	call	0x321c	; 0x321c <UART_recieveByte>
    3342:	89 83       	std	Y+1, r24	; 0x01
	if (message == CORRECT_PASSWORD)
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	89 30       	cpi	r24, 0x09	; 9
    3348:	21 f4       	brne	.+8      	; 0x3352 <__vector_11+0x40>
	{
		MC_1_recieved = 1; /* Door is Opening */
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	80 93 3e 01 	sts	0x013E, r24
    3350:	0d c0       	rjmp	.+26     	; 0x336c <__vector_11+0x5a>

	} else if (message == WRONG_PASSWORD)
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	86 30       	cpi	r24, 0x06	; 6
    3356:	21 f4       	brne	.+8      	; 0x3360 <__vector_11+0x4e>
	{
		MC_1_recieved = 2;
    3358:	82 e0       	ldi	r24, 0x02	; 2
    335a:	80 93 3e 01 	sts	0x013E, r24
    335e:	06 c0       	rjmp	.+12     	; 0x336c <__vector_11+0x5a>
	}
	else if(message == PASSWORD_CHANGED)
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	84 30       	cpi	r24, 0x04	; 4
    3364:	19 f4       	brne	.+6      	; 0x336c <__vector_11+0x5a>
	{
		MC_1_recieved = 3;
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	80 93 3e 01 	sts	0x013E, r24
	}

}
    336c:	0f 90       	pop	r0
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	ff 91       	pop	r31
    3374:	ef 91       	pop	r30
    3376:	bf 91       	pop	r27
    3378:	af 91       	pop	r26
    337a:	9f 91       	pop	r25
    337c:	8f 91       	pop	r24
    337e:	7f 91       	pop	r23
    3380:	6f 91       	pop	r22
    3382:	5f 91       	pop	r21
    3384:	4f 91       	pop	r20
    3386:	3f 91       	pop	r19
    3388:	2f 91       	pop	r18
    338a:	0f 90       	pop	r0
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	0f 90       	pop	r0
    3390:	1f 90       	pop	r1
    3392:	18 95       	reti

00003394 <__prologue_saves__>:
    3394:	2f 92       	push	r2
    3396:	3f 92       	push	r3
    3398:	4f 92       	push	r4
    339a:	5f 92       	push	r5
    339c:	6f 92       	push	r6
    339e:	7f 92       	push	r7
    33a0:	8f 92       	push	r8
    33a2:	9f 92       	push	r9
    33a4:	af 92       	push	r10
    33a6:	bf 92       	push	r11
    33a8:	cf 92       	push	r12
    33aa:	df 92       	push	r13
    33ac:	ef 92       	push	r14
    33ae:	ff 92       	push	r15
    33b0:	0f 93       	push	r16
    33b2:	1f 93       	push	r17
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	ca 1b       	sub	r28, r26
    33be:	db 0b       	sbc	r29, r27
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	09 94       	ijmp

000033cc <__epilogue_restores__>:
    33cc:	2a 88       	ldd	r2, Y+18	; 0x12
    33ce:	39 88       	ldd	r3, Y+17	; 0x11
    33d0:	48 88       	ldd	r4, Y+16	; 0x10
    33d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33da:	9b 84       	ldd	r9, Y+11	; 0x0b
    33dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33de:	b9 84       	ldd	r11, Y+9	; 0x09
    33e0:	c8 84       	ldd	r12, Y+8	; 0x08
    33e2:	df 80       	ldd	r13, Y+7	; 0x07
    33e4:	ee 80       	ldd	r14, Y+6	; 0x06
    33e6:	fd 80       	ldd	r15, Y+5	; 0x05
    33e8:	0c 81       	ldd	r16, Y+4	; 0x04
    33ea:	1b 81       	ldd	r17, Y+3	; 0x03
    33ec:	aa 81       	ldd	r26, Y+2	; 0x02
    33ee:	b9 81       	ldd	r27, Y+1	; 0x01
    33f0:	ce 0f       	add	r28, r30
    33f2:	d1 1d       	adc	r29, r1
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	ed 01       	movw	r28, r26
    3400:	08 95       	ret

00003402 <strcmp>:
    3402:	fb 01       	movw	r30, r22
    3404:	dc 01       	movw	r26, r24
    3406:	8d 91       	ld	r24, X+
    3408:	01 90       	ld	r0, Z+
    340a:	80 19       	sub	r24, r0
    340c:	01 10       	cpse	r0, r1
    340e:	d9 f3       	breq	.-10     	; 0x3406 <strcmp+0x4>
    3410:	99 0b       	sbc	r25, r25
    3412:	08 95       	ret

00003414 <itoa>:
    3414:	fb 01       	movw	r30, r22
    3416:	9f 01       	movw	r18, r30
    3418:	e8 94       	clt
    341a:	42 30       	cpi	r20, 0x02	; 2
    341c:	c4 f0       	brlt	.+48     	; 0x344e <itoa+0x3a>
    341e:	45 32       	cpi	r20, 0x25	; 37
    3420:	b4 f4       	brge	.+44     	; 0x344e <itoa+0x3a>
    3422:	4a 30       	cpi	r20, 0x0A	; 10
    3424:	29 f4       	brne	.+10     	; 0x3430 <itoa+0x1c>
    3426:	97 fb       	bst	r25, 7
    3428:	1e f4       	brtc	.+6      	; 0x3430 <itoa+0x1c>
    342a:	90 95       	com	r25
    342c:	81 95       	neg	r24
    342e:	9f 4f       	sbci	r25, 0xFF	; 255
    3430:	64 2f       	mov	r22, r20
    3432:	77 27       	eor	r23, r23
    3434:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__udivmodhi4>
    3438:	80 5d       	subi	r24, 0xD0	; 208
    343a:	8a 33       	cpi	r24, 0x3A	; 58
    343c:	0c f0       	brlt	.+2      	; 0x3440 <itoa+0x2c>
    343e:	89 5d       	subi	r24, 0xD9	; 217
    3440:	81 93       	st	Z+, r24
    3442:	cb 01       	movw	r24, r22
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	a1 f7       	brne	.-24     	; 0x3430 <itoa+0x1c>
    3448:	16 f4       	brtc	.+4      	; 0x344e <itoa+0x3a>
    344a:	5d e2       	ldi	r21, 0x2D	; 45
    344c:	51 93       	st	Z+, r21
    344e:	10 82       	st	Z, r1
    3450:	c9 01       	movw	r24, r18
    3452:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <strrev>

00003456 <strrev>:
    3456:	dc 01       	movw	r26, r24
    3458:	fc 01       	movw	r30, r24
    345a:	67 2f       	mov	r22, r23
    345c:	71 91       	ld	r23, Z+
    345e:	77 23       	and	r23, r23
    3460:	e1 f7       	brne	.-8      	; 0x345a <strrev+0x4>
    3462:	32 97       	sbiw	r30, 0x02	; 2
    3464:	04 c0       	rjmp	.+8      	; 0x346e <strrev+0x18>
    3466:	7c 91       	ld	r23, X
    3468:	6d 93       	st	X+, r22
    346a:	70 83       	st	Z, r23
    346c:	62 91       	ld	r22, -Z
    346e:	ae 17       	cp	r26, r30
    3470:	bf 07       	cpc	r27, r31
    3472:	c8 f3       	brcs	.-14     	; 0x3466 <strrev+0x10>
    3474:	08 95       	ret

00003476 <__udivmodhi4>:
    3476:	aa 1b       	sub	r26, r26
    3478:	bb 1b       	sub	r27, r27
    347a:	51 e1       	ldi	r21, 0x11	; 17
    347c:	07 c0       	rjmp	.+14     	; 0x348c <__udivmodhi4_ep>

0000347e <__udivmodhi4_loop>:
    347e:	aa 1f       	adc	r26, r26
    3480:	bb 1f       	adc	r27, r27
    3482:	a6 17       	cp	r26, r22
    3484:	b7 07       	cpc	r27, r23
    3486:	10 f0       	brcs	.+4      	; 0x348c <__udivmodhi4_ep>
    3488:	a6 1b       	sub	r26, r22
    348a:	b7 0b       	sbc	r27, r23

0000348c <__udivmodhi4_ep>:
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	5a 95       	dec	r21
    3492:	a9 f7       	brne	.-22     	; 0x347e <__udivmodhi4_loop>
    3494:	80 95       	com	r24
    3496:	90 95       	com	r25
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	08 95       	ret

0000349e <_exit>:
    349e:	f8 94       	cli

000034a0 <__stop_program>:
    34a0:	ff cf       	rjmp	.-2      	; 0x34a0 <__stop_program>
